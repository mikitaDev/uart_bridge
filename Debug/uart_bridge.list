
uart_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006380  08006380  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006388  08006388  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004bf0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c50  20004c50  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013a48  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f77  00000000  00000000  00033b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f28  00000000  00000000  00036a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b92  00000000  00000000  000379c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000356b  00000000  00000000  00038552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013195  00000000  00000000  0003babd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc9fc  00000000  00000000  0004ec52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000405c  00000000  00000000  0011b650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0011f6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006210 	.word	0x08006210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006210 	.word	0x08006210

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d0:	f000 f95c 	bl	800078c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d4:	f002 f960 	bl	8002798 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004d8:	f002 f9c8 	bl	800286c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004dc:	f002 fa34 	bl	8002948 <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 80004e0:	f002 fa70 	bl	80029c4 <MX_USART6_UART_Init>


	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004e4:	f002 fb90 	bl	8002c08 <osKernelInitialize>
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <main+0x3c>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <main+0x40>)
 80004ee:	f002 fbd5 	bl	8002c9c <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <main+0x44>)
 80004f6:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	uart2_task_init();
 80004f8:	f002 fada 	bl	8002ab0 <uart2_task_init>
	uart6_task_init();
 80004fc:	f002 fb14 	bl	8002b28 <uart6_task_init>

	/* Start scheduler */
	osKernelStart();
 8000500:	f002 fba6 	bl	8002c50 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000504:	e7fe      	b.n	8000504 <main+0x38>
 8000506:	bf00      	nop
 8000508:	080062ac 	.word	0x080062ac
 800050c:	08000515 	.word	0x08000515
 8000510:	2000007c 	.word	0x2000007c

08000514 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f002 fc4f 	bl	8002dc0 <osDelay>
 8000522:	e7fb      	b.n	800051c <StartDefaultTask+0x8>

08000524 <Error_Handler>:
}
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_MspInit+0x54>)
 800053c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053e:	4a11      	ldr	r2, [pc, #68]	; (8000584 <HAL_MspInit+0x54>)
 8000540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000544:	6453      	str	r3, [r2, #68]	; 0x44
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x54>)
 8000548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_MspInit+0x54>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <HAL_MspInit+0x54>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	6413      	str	r3, [r2, #64]	; 0x40
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_MspInit+0x54>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	210f      	movs	r1, #15
 8000572:	f06f 0001 	mvn.w	r0, #1
 8000576:	f000 fa56 	bl	8000a26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 031c 	add.w	r3, r7, #28
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a3a      	ldr	r2, [pc, #232]	; (8000690 <HAL_UART_MspInit+0x108>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d134      	bne.n	8000614 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <HAL_UART_MspInit+0x10c>)
 80005b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b2:	4a38      	ldr	r2, [pc, #224]	; (8000694 <HAL_UART_MspInit+0x10c>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ba:	4b36      	ldr	r3, [pc, #216]	; (8000694 <HAL_UART_MspInit+0x10c>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b32      	ldr	r3, [pc, #200]	; (8000694 <HAL_UART_MspInit+0x10c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a31      	ldr	r2, [pc, #196]	; (8000694 <HAL_UART_MspInit+0x10c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <HAL_UART_MspInit+0x10c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005e2:	230c      	movs	r3, #12
 80005e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ee:	2303      	movs	r3, #3
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005f2:	2307      	movs	r3, #7
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4826      	ldr	r0, [pc, #152]	; (8000698 <HAL_UART_MspInit+0x110>)
 80005fe:	f000 fadb 	bl	8000bb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2105      	movs	r1, #5
 8000606:	2026      	movs	r0, #38	; 0x26
 8000608:	f000 fa0d 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800060c:	2026      	movs	r0, #38	; 0x26
 800060e:	f000 fa26 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000612:	e038      	b.n	8000686 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <HAL_UART_MspInit+0x114>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d133      	bne.n	8000686 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <HAL_UART_MspInit+0x10c>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <HAL_UART_MspInit+0x10c>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	6453      	str	r3, [r2, #68]	; 0x44
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <HAL_UART_MspInit+0x10c>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_UART_MspInit+0x10c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_UART_MspInit+0x10c>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_UART_MspInit+0x10c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000656:	23c0      	movs	r3, #192	; 0xc0
 8000658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000666:	2308      	movs	r3, #8
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <HAL_UART_MspInit+0x118>)
 8000672:	f000 faa1 	bl	8000bb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2105      	movs	r1, #5
 800067a:	2047      	movs	r0, #71	; 0x47
 800067c:	f000 f9d3 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000680:	2047      	movs	r0, #71	; 0x47
 8000682:	f000 f9ec 	bl	8000a5e <HAL_NVIC_EnableIRQ>
}
 8000686:	bf00      	nop
 8000688:	3730      	adds	r7, #48	; 0x30
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40004400 	.word	0x40004400
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000
 800069c:	40011400 	.word	0x40011400
 80006a0:	40020800 	.word	0x40020800

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <NMI_Handler+0x4>

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <MemManage_Handler+0x4>

080006b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f8ac 	bl	8000830 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006d8:	f004 fb4e 	bl	8004d78 <xTaskGetSchedulerState>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d001      	beq.n	80006e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006e2:	f005 fa31 	bl	8005b48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <USART2_IRQHandler+0x10>)
 80006f2:	f001 f957 	bl	80019a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000084 	.word	0x20000084

08000700 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <USART6_IRQHandler+0x10>)
 8000706:	f001 f94d 	bl	80019a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000c8 	.word	0x200000c8

08000714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <SystemInit+0x20>)
 800071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <SystemInit+0x20>)
 8000720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000770 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800073e:	490e      	ldr	r1, [pc, #56]	; (8000778 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000754:	4c0b      	ldr	r4, [pc, #44]	; (8000784 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000762:	f7ff ffd7 	bl	8000714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f005 fcc7 	bl	80060f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800076a:	f7ff feaf 	bl	80004cc <main>
  bx  lr    
 800076e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800077c:	08006390 	.word	0x08006390
  ldr r2, =_sbss
 8000780:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000784:	20004c50 	.word	0x20004c50

08000788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC_IRQHandler>
	...

0800078c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_Init+0x40>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <HAL_Init+0x40>)
 8000796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <HAL_Init+0x40>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_Init+0x40>)
 80007a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_Init+0x40>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_Init+0x40>)
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f92b 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 f808 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c0:	f7ff feb6 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023c00 	.word	0x40023c00

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x54>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x58>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f943 	bl	8000a7a <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 f90b 	bl	8000a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <HAL_InitTick+0x5c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008
 8000854:	20000080 	.word	0x20000080

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000080 	.word	0x20000080

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4907      	ldr	r1, [pc, #28]	; (800090c <__NVIC_EnableIRQ+0x38>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f7ff ff8e 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff29 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff3e 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff8e 	bl	8000964 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5d 	bl	8000910 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff31 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa2 	bl	80009cc <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff feda 	bl	8000858 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d008      	beq.n	8000ac4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e052      	b.n	8000b6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0216 	bic.w	r2, r2, #22
 8000ad2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ae2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d103      	bne.n	8000af4 <HAL_DMA_Abort+0x62>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d007      	beq.n	8000b04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f022 0208 	bic.w	r2, r2, #8
 8000b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0201 	bic.w	r2, r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b14:	e013      	b.n	8000b3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b16:	f7ff fe9f 	bl	8000858 <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	d90c      	bls.n	8000b3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2220      	movs	r2, #32
 8000b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e015      	b.n	8000b6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1e4      	bne.n	8000b16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b50:	223f      	movs	r2, #63	; 0x3f
 8000b52:	409a      	lsls	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d004      	beq.n	8000b90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e00c      	b.n	8000baa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2205      	movs	r2, #5
 8000b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f022 0201 	bic.w	r2, r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	e16b      	b.n	8000eac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f040 815a 	bne.w	8000ea6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d005      	beq.n	8000c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d130      	bne.n	8000c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c40:	2201      	movs	r2, #1
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	f003 0201 	and.w	r2, r3, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d017      	beq.n	8000ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d123      	bne.n	8000cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	08da      	lsrs	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3208      	adds	r2, #8
 8000cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	691a      	ldr	r2, [r3, #16]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	69b9      	ldr	r1, [r7, #24]
 8000cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0203 	and.w	r2, r3, #3
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80b4 	beq.w	8000ea6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b60      	ldr	r3, [pc, #384]	; (8000ec4 <HAL_GPIO_Init+0x30c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a5f      	ldr	r2, [pc, #380]	; (8000ec4 <HAL_GPIO_Init+0x30c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <HAL_GPIO_Init+0x30c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5a:	4a5b      	ldr	r2, [pc, #364]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3302      	adds	r3, #2
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	220f      	movs	r2, #15
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_GPIO_Init+0x314>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d02b      	beq.n	8000dde <HAL_GPIO_Init+0x226>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a51      	ldr	r2, [pc, #324]	; (8000ed0 <HAL_GPIO_Init+0x318>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d025      	beq.n	8000dda <HAL_GPIO_Init+0x222>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a50      	ldr	r2, [pc, #320]	; (8000ed4 <HAL_GPIO_Init+0x31c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01f      	beq.n	8000dd6 <HAL_GPIO_Init+0x21e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0x21a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <HAL_GPIO_Init+0x324>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x216>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <HAL_GPIO_Init+0x328>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x212>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4c      	ldr	r2, [pc, #304]	; (8000ee4 <HAL_GPIO_Init+0x32c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x20e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4b      	ldr	r2, [pc, #300]	; (8000ee8 <HAL_GPIO_Init+0x330>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x20a>
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	e00e      	b.n	8000de0 <HAL_GPIO_Init+0x228>
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	e00c      	b.n	8000de0 <HAL_GPIO_Init+0x228>
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	e00a      	b.n	8000de0 <HAL_GPIO_Init+0x228>
 8000dca:	2305      	movs	r3, #5
 8000dcc:	e008      	b.n	8000de0 <HAL_GPIO_Init+0x228>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x228>
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e004      	b.n	8000de0 <HAL_GPIO_Init+0x228>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_Init+0x228>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <HAL_GPIO_Init+0x228>
 8000dde:	2300      	movs	r3, #0
 8000de0:	69fa      	ldr	r2, [r7, #28]
 8000de2:	f002 0203 	and.w	r2, r2, #3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4093      	lsls	r3, r2
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df0:	4935      	ldr	r1, [pc, #212]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfe:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <HAL_GPIO_Init+0x334>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e22:	4a32      	ldr	r2, [pc, #200]	; (8000eec <HAL_GPIO_Init+0x334>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HAL_GPIO_Init+0x334>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <HAL_GPIO_Init+0x334>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_GPIO_Init+0x334>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_GPIO_Init+0x334>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_GPIO_Init+0x334>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <HAL_GPIO_Init+0x334>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	f67f ae90 	bls.w	8000bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40021400 	.word	0x40021400
 8000ee4:	40021800 	.word	0x40021800
 8000ee8:	40021c00 	.word	0x40021c00
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e267      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d075      	beq.n	8000ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f0e:	4b88      	ldr	r3, [pc, #544]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d00c      	beq.n	8000f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4b85      	ldr	r3, [pc, #532]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d112      	bne.n	8000f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f26:	4b82      	ldr	r3, [pc, #520]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f32:	d10b      	bne.n	8000f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	4b7e      	ldr	r3, [pc, #504]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d05b      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x108>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d157      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e242      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d106      	bne.n	8000f64 <HAL_RCC_OscConfig+0x74>
 8000f56:	4b76      	ldr	r3, [pc, #472]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a75      	ldr	r2, [pc, #468]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e01d      	b.n	8000fa0 <HAL_RCC_OscConfig+0xb0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x98>
 8000f6e:	4b70      	ldr	r3, [pc, #448]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6f      	ldr	r2, [pc, #444]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b6d      	ldr	r3, [pc, #436]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a6c      	ldr	r2, [pc, #432]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e00b      	b.n	8000fa0 <HAL_RCC_OscConfig+0xb0>
 8000f88:	4b69      	ldr	r3, [pc, #420]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a68      	ldr	r2, [pc, #416]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b66      	ldr	r3, [pc, #408]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a65      	ldr	r2, [pc, #404]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d013      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fc56 	bl	8000858 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fc52 	bl	8000858 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e207      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	4b5b      	ldr	r3, [pc, #364]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xc0>
 8000fce:	e014      	b.n	8000ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc42 	bl	8000858 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fc3e 	bl	8000858 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1f3      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	4b51      	ldr	r3, [pc, #324]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0xe8>
 8000ff6:	e000      	b.n	8000ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d063      	beq.n	80010ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001006:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800101a:	2b08      	cmp	r3, #8
 800101c:	d11c      	bne.n	8001058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800101e:	4b44      	ldr	r3, [pc, #272]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d116      	bne.n	8001058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	4b41      	ldr	r3, [pc, #260]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_RCC_OscConfig+0x152>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e1c7      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4937      	ldr	r1, [pc, #220]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	e03a      	b.n	80010ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d020      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <HAL_RCC_OscConfig+0x244>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001066:	f7ff fbf7 	bl	8000858 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fbf3 	bl	8000858 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e1a8      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4925      	ldr	r1, [pc, #148]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
 80010a0:	e015      	b.n	80010ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <HAL_RCC_OscConfig+0x244>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a8:	f7ff fbd6 	bl	8000858 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b0:	f7ff fbd2 	bl	8000858 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e187      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d036      	beq.n	8001148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d016      	beq.n	8001110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_RCC_OscConfig+0x248>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e8:	f7ff fbb6 	bl	8000858 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fbb2 	bl	8000858 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e167      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_RCC_OscConfig+0x240>)
 8001104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x200>
 800110e:	e01b      	b.n	8001148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_RCC_OscConfig+0x248>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb9f 	bl	8000858 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111c:	e00e      	b.n	800113c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111e:	f7ff fb9b 	bl	8000858 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d907      	bls.n	800113c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e150      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
 8001130:	40023800 	.word	0x40023800
 8001134:	42470000 	.word	0x42470000
 8001138:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113c:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800113e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1ea      	bne.n	800111e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 8097 	beq.w	8001284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115a:	4b81      	ldr	r3, [pc, #516]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10f      	bne.n	8001186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a7c      	ldr	r2, [pc, #496]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b7a      	ldr	r3, [pc, #488]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b77      	ldr	r3, [pc, #476]	; (8001364 <HAL_RCC_OscConfig+0x474>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001192:	4b74      	ldr	r3, [pc, #464]	; (8001364 <HAL_RCC_OscConfig+0x474>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a73      	ldr	r2, [pc, #460]	; (8001364 <HAL_RCC_OscConfig+0x474>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119e:	f7ff fb5b 	bl	8000858 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a6:	f7ff fb57 	bl	8000858 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e10c      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <HAL_RCC_OscConfig+0x474>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x2ea>
 80011cc:	4b64      	ldr	r3, [pc, #400]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80011ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d0:	4a63      	ldr	r2, [pc, #396]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6713      	str	r3, [r2, #112]	; 0x70
 80011d8:	e01c      	b.n	8001214 <HAL_RCC_OscConfig+0x324>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x30c>
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e6:	4a5e      	ldr	r2, [pc, #376]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6713      	str	r3, [r2, #112]	; 0x70
 80011ee:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80011f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f2:	4a5b      	ldr	r2, [pc, #364]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6713      	str	r3, [r2, #112]	; 0x70
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0x324>
 80011fc:	4b58      	ldr	r3, [pc, #352]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	4a57      	ldr	r2, [pc, #348]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6713      	str	r3, [r2, #112]	; 0x70
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800120a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120c:	4a54      	ldr	r2, [pc, #336]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800120e:	f023 0304 	bic.w	r3, r3, #4
 8001212:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d015      	beq.n	8001248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121c:	f7ff fb1c 	bl	8000858 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001222:	e00a      	b.n	800123a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001224:	f7ff fb18 	bl	8000858 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001232:	4293      	cmp	r3, r2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e0cb      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123a:	4b49      	ldr	r3, [pc, #292]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800123c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0ee      	beq.n	8001224 <HAL_RCC_OscConfig+0x334>
 8001246:	e014      	b.n	8001272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001248:	f7ff fb06 	bl	8000858 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124e:	e00a      	b.n	8001266 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001250:	f7ff fb02 	bl	8000858 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	; 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e0b5      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001266:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 8001268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1ee      	bne.n	8001250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d105      	bne.n	8001284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a38      	ldr	r2, [pc, #224]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800127e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80a1 	beq.w	80013d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800128e:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b08      	cmp	r3, #8
 8001298:	d05c      	beq.n	8001354 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d141      	bne.n	8001326 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_RCC_OscConfig+0x478>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fad6 	bl	8000858 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fad2 	bl	8000858 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e087      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69da      	ldr	r2, [r3, #28]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	085b      	lsrs	r3, r3, #1
 80012e6:	3b01      	subs	r3, #1
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	061b      	lsls	r3, r3, #24
 80012f2:	491b      	ldr	r1, [pc, #108]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_RCC_OscConfig+0x478>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff faab 	bl	8000858 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff faa7 	bl	8000858 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e05c      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x416>
 8001324:	e054      	b.n	80013d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_RCC_OscConfig+0x478>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fa94 	bl	8000858 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fa90 	bl	8000858 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e045      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_RCC_OscConfig+0x470>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x444>
 8001352:	e03d      	b.n	80013d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d107      	bne.n	800136c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e038      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000
 8001368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_RCC_OscConfig+0x4ec>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d028      	beq.n	80013cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d121      	bne.n	80013cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d11a      	bne.n	80013cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800139c:	4013      	ands	r3, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d111      	bne.n	80013cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	3b01      	subs	r3, #1
 80013b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d107      	bne.n	80013cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800

080013e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0cc      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d90c      	bls.n	800141c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b65      	ldr	r3, [pc, #404]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b63      	ldr	r3, [pc, #396]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0b8      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001434:	4b59      	ldr	r3, [pc, #356]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a58      	ldr	r2, [pc, #352]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800143e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a52      	ldr	r2, [pc, #328]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001458:	4b50      	ldr	r3, [pc, #320]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	494d      	ldr	r1, [pc, #308]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d044      	beq.n	8001500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d107      	bne.n	800148e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b47      	ldr	r3, [pc, #284]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d119      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e07f      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d003      	beq.n	800149e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800149a:	2b03      	cmp	r3, #3
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06f      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e067      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014be:	4b37      	ldr	r3, [pc, #220]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f023 0203 	bic.w	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4934      	ldr	r1, [pc, #208]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d0:	f7ff f9c2 	bl	8000858 <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff f9be 	bl	8000858 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e04f      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 020c 	and.w	r2, r3, #12
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d20c      	bcs.n	8001528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e032      	b.n	800158e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4916      	ldr	r1, [pc, #88]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	490e      	ldr	r1, [pc, #56]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001566:	f000 f821 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 800156a:	4602      	mov	r2, r0
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	490a      	ldr	r1, [pc, #40]	; (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	5ccb      	ldrb	r3, [r1, r3]
 800157a:	fa22 f303 	lsr.w	r3, r2, r3
 800157e:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f922 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00
 800159c:	40023800 	.word	0x40023800
 80015a0:	080062d0 	.word	0x080062d0
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b0:	b094      	sub	sp, #80	; 0x50
 80015b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	647b      	str	r3, [r7, #68]	; 0x44
 80015b8:	2300      	movs	r3, #0
 80015ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015bc:	2300      	movs	r3, #0
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015c4:	4b79      	ldr	r3, [pc, #484]	; (80017ac <HAL_RCC_GetSysClockFreq+0x200>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d00d      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x40>
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	f200 80e1 	bhi.w	8001798 <HAL_RCC_GetSysClockFreq+0x1ec>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x34>
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80015de:	e0db      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b73      	ldr	r3, [pc, #460]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80015e4:	e0db      	b.n	800179e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015e6:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80015e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80015ea:	e0d8      	b.n	800179e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ec:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_GetSysClockFreq+0x200>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f6:	4b6d      	ldr	r3, [pc, #436]	; (80017ac <HAL_RCC_GetSysClockFreq+0x200>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d063      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001602:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	2200      	movs	r2, #0
 800160a:	63bb      	str	r3, [r7, #56]	; 0x38
 800160c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
 800161a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800161e:	4622      	mov	r2, r4
 8001620:	462b      	mov	r3, r5
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	0159      	lsls	r1, r3, #5
 800162c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001630:	0150      	lsls	r0, r2, #5
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4621      	mov	r1, r4
 8001638:	1a51      	subs	r1, r2, r1
 800163a:	6139      	str	r1, [r7, #16]
 800163c:	4629      	mov	r1, r5
 800163e:	eb63 0301 	sbc.w	r3, r3, r1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001650:	4659      	mov	r1, fp
 8001652:	018b      	lsls	r3, r1, #6
 8001654:	4651      	mov	r1, sl
 8001656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800165a:	4651      	mov	r1, sl
 800165c:	018a      	lsls	r2, r1, #6
 800165e:	4651      	mov	r1, sl
 8001660:	ebb2 0801 	subs.w	r8, r2, r1
 8001664:	4659      	mov	r1, fp
 8001666:	eb63 0901 	sbc.w	r9, r3, r1
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800167a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800167e:	4690      	mov	r8, r2
 8001680:	4699      	mov	r9, r3
 8001682:	4623      	mov	r3, r4
 8001684:	eb18 0303 	adds.w	r3, r8, r3
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	462b      	mov	r3, r5
 800168c:	eb49 0303 	adc.w	r3, r9, r3
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800169e:	4629      	mov	r1, r5
 80016a0:	024b      	lsls	r3, r1, #9
 80016a2:	4621      	mov	r1, r4
 80016a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016a8:	4621      	mov	r1, r4
 80016aa:	024a      	lsls	r2, r1, #9
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b2:	2200      	movs	r2, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016bc:	f7fe fd88 	bl	80001d0 <__aeabi_uldivmod>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4613      	mov	r3, r2
 80016c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016c8:	e058      	b.n	800177c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ca:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_RCC_GetSysClockFreq+0x200>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	099b      	lsrs	r3, r3, #6
 80016d0:	2200      	movs	r2, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	4611      	mov	r1, r2
 80016d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
 80016e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016e4:	4642      	mov	r2, r8
 80016e6:	464b      	mov	r3, r9
 80016e8:	f04f 0000 	mov.w	r0, #0
 80016ec:	f04f 0100 	mov.w	r1, #0
 80016f0:	0159      	lsls	r1, r3, #5
 80016f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f6:	0150      	lsls	r0, r2, #5
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4641      	mov	r1, r8
 80016fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001702:	4649      	mov	r1, r9
 8001704:	eb63 0b01 	sbc.w	fp, r3, r1
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800171c:	ebb2 040a 	subs.w	r4, r2, sl
 8001720:	eb63 050b 	sbc.w	r5, r3, fp
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	00eb      	lsls	r3, r5, #3
 800172e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001732:	00e2      	lsls	r2, r4, #3
 8001734:	4614      	mov	r4, r2
 8001736:	461d      	mov	r5, r3
 8001738:	4643      	mov	r3, r8
 800173a:	18e3      	adds	r3, r4, r3
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	464b      	mov	r3, r9
 8001740:	eb45 0303 	adc.w	r3, r5, r3
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001752:	4629      	mov	r1, r5
 8001754:	028b      	lsls	r3, r1, #10
 8001756:	4621      	mov	r1, r4
 8001758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800175c:	4621      	mov	r1, r4
 800175e:	028a      	lsls	r2, r1, #10
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001766:	2200      	movs	r2, #0
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	61fa      	str	r2, [r7, #28]
 800176c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001770:	f7fe fd2e 	bl	80001d0 <__aeabi_uldivmod>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4613      	mov	r3, r2
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_GetSysClockFreq+0x200>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	0c1b      	lsrs	r3, r3, #16
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	3301      	adds	r3, #1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800178c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800178e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001796:	e002      	b.n	800179e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800179c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3750      	adds	r7, #80	; 0x50
 80017a4:	46bd      	mov	sp, r7
 80017a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	00f42400 	.word	0x00f42400
 80017b4:	007a1200 	.word	0x007a1200

080017b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_RCC_GetHCLKFreq+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000

080017d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017d4:	f7ff fff0 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	0a9b      	lsrs	r3, r3, #10
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	4903      	ldr	r1, [pc, #12]	; (80017f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017e6:	5ccb      	ldrb	r3, [r1, r3]
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	080062e0 	.word	0x080062e0

080017f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017fc:	f7ff ffdc 	bl	80017b8 <HAL_RCC_GetHCLKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0b5b      	lsrs	r3, r3, #13
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4903      	ldr	r1, [pc, #12]	; (800181c <HAL_RCC_GetPCLK2Freq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	080062e0 	.word	0x080062e0

08001820 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e03f      	b.n	80018b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe fe9e 	bl	8000588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2224      	movs	r2, #36	; 0x24
 8001850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fd23 	bl	80022b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695a      	ldr	r2, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	4613      	mov	r3, r2
 80018c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d130      	bne.n	8001936 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_UART_Transmit_IT+0x26>
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e029      	b.n	8001938 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_UART_Transmit_IT+0x38>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e022      	b.n	8001938 <HAL_UART_Transmit_IT+0x7e>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	88fa      	ldrh	r2, [r7, #6]
 8001904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2221      	movs	r2, #33	; 0x21
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001930:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001936:	2302      	movs	r3, #2
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	4613      	mov	r3, r2
 8001950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b20      	cmp	r3, #32
 800195c:	d11d      	bne.n	800199a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_UART_Receive_IT+0x26>
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e016      	b.n	800199c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_UART_Receive_IT+0x38>
 8001978:	2302      	movs	r3, #2
 800197a:	e00f      	b.n	800199c <HAL_UART_Receive_IT+0x58>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	461a      	mov	r2, r3
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 fab5 	bl	8001f00 <UART_Start_Receive_IT>
 8001996:	4603      	mov	r3, r0
 8001998:	e000      	b.n	800199c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800199a:	2302      	movs	r3, #2
  }
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0ba      	sub	sp, #232	; 0xe8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80019e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_UART_IRQHandler+0x66>
 80019f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019fa:	f003 0320 	and.w	r3, r3, #32
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fb99 	bl	800213a <UART_Receive_IT>
      return;
 8001a08:	e256      	b.n	8001eb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80de 	beq.w	8001bd0 <HAL_UART_IRQHandler+0x22c>
 8001a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d106      	bne.n	8001a2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80d1 	beq.w	8001bd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_UART_IRQHandler+0xae>
 8001a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_UART_IRQHandler+0xd2>
 8001a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f043 0202 	orr.w	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_UART_IRQHandler+0xf6>
 8001a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f043 0204 	orr.w	r2, r3, #4
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d011      	beq.n	8001aca <HAL_UART_IRQHandler+0x126>
 8001aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f043 0208 	orr.w	r2, r3, #8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 81ed 	beq.w	8001eae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_UART_IRQHandler+0x14e>
 8001ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fb24 	bl	800213a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afc:	2b40      	cmp	r3, #64	; 0x40
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <HAL_UART_IRQHandler+0x17a>
 8001b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d04f      	beq.n	8001bbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fa2c 	bl	8001f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2e:	2b40      	cmp	r3, #64	; 0x40
 8001b30:	d141      	bne.n	8001bb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3314      	adds	r3, #20
 8001b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b40:	e853 3f00 	ldrex	r3, [r3]
 8001b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3314      	adds	r3, #20
 8001b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b6e:	e841 2300 	strex	r3, r2, [r1]
 8001b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1d9      	bne.n	8001b32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d013      	beq.n	8001bae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	4a7d      	ldr	r2, [pc, #500]	; (8001d80 <HAL_UART_IRQHandler+0x3dc>)
 8001b8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe ffed 	bl	8000b72 <HAL_DMA_Abort_IT>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d016      	beq.n	8001bcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bac:	e00e      	b.n	8001bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f990 	bl	8001ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bb4:	e00a      	b.n	8001bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f98c 	bl	8001ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bbc:	e006      	b.n	8001bcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f988 	bl	8001ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001bca:	e170      	b.n	8001eae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bcc:	bf00      	nop
    return;
 8001bce:	e16e      	b.n	8001eae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 814a 	bne.w	8001e6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8143 	beq.w	8001e6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 813c 	beq.w	8001e6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	f040 80b4 	bne.w	8001d84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001c28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8140 	beq.w	8001eb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	f080 8139 	bcs.w	8001eb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001c46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c52:	f000 8088 	beq.w	8001d66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	330c      	adds	r3, #12
 8001c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c64:	e853 3f00 	ldrex	r3, [r3]
 8001c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001c82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c92:	e841 2300 	strex	r3, r2, [r1]
 8001c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1d9      	bne.n	8001c56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cac:	e853 3f00 	ldrex	r3, [r3]
 8001cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3314      	adds	r3, #20
 8001cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001cd2:	e841 2300 	strex	r3, r2, [r1]
 8001cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1e1      	bne.n	8001ca2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3314      	adds	r3, #20
 8001ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce8:	e853 3f00 	ldrex	r3, [r3]
 8001cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3314      	adds	r3, #20
 8001cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d0a:	e841 2300 	strex	r3, r2, [r1]
 8001d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1e3      	bne.n	8001cde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	330c      	adds	r3, #12
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2e:	e853 3f00 	ldrex	r3, [r3]
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d36:	f023 0310 	bic.w	r3, r3, #16
 8001d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	330c      	adds	r3, #12
 8001d44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001d48:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d50:	e841 2300 	strex	r3, r2, [r1]
 8001d54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e3      	bne.n	8001d24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fe96 	bl	8000a92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8b6 	bl	8001ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d7c:	e099      	b.n	8001eb2 <HAL_UART_IRQHandler+0x50e>
 8001d7e:	bf00      	nop
 8001d80:	08002043 	.word	0x08002043
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 808b 	beq.w	8001eb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8086 	beq.w	8001eb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	330c      	adds	r3, #12
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db4:	e853 3f00 	ldrex	r3, [r3]
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	330c      	adds	r3, #12
 8001dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001dce:	647a      	str	r2, [r7, #68]	; 0x44
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dd6:	e841 2300 	strex	r3, r2, [r1]
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e3      	bne.n	8001daa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	3314      	adds	r3, #20
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	e853 3f00 	ldrex	r3, [r3]
 8001df0:	623b      	str	r3, [r7, #32]
   return(result);
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3314      	adds	r3, #20
 8001e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001e06:	633a      	str	r2, [r7, #48]	; 0x30
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e0e:	e841 2300 	strex	r3, r2, [r1]
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e3      	bne.n	8001de2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	e853 3f00 	ldrex	r3, [r3]
 8001e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0310 	bic.w	r3, r3, #16
 8001e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	330c      	adds	r3, #12
 8001e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001e4c:	61fa      	str	r2, [r7, #28]
 8001e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e50:	69b9      	ldr	r1, [r7, #24]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	e841 2300 	strex	r3, r2, [r1]
 8001e58:	617b      	str	r3, [r7, #20]
   return(result);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e3      	bne.n	8001e28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f83e 	bl	8001ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e6c:	e023      	b.n	8001eb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_UART_IRQHandler+0x4ea>
 8001e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8ef 	bl	800206a <UART_Transmit_IT>
    return;
 8001e8c:	e014      	b.n	8001eb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00e      	beq.n	8001eb8 <HAL_UART_IRQHandler+0x514>
 8001e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f92f 	bl	800210a <UART_EndTransmit_IT>
    return;
 8001eac:	e004      	b.n	8001eb8 <HAL_UART_IRQHandler+0x514>
    return;
 8001eae:	bf00      	nop
 8001eb0:	e002      	b.n	8001eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8001eb2:	bf00      	nop
 8001eb4:	e000      	b.n	8001eb8 <HAL_UART_IRQHandler+0x514>
      return;
 8001eb6:	bf00      	nop
  }
}
 8001eb8:	37e8      	adds	r7, #232	; 0xe8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop

08001ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2222      	movs	r2, #34	; 0x22
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0220 	orr.w	r2, r2, #32
 8001f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b095      	sub	sp, #84	; 0x54
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	330c      	adds	r3, #12
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	e853 3f00 	ldrex	r3, [r3]
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fa4:	643a      	str	r2, [r7, #64]	; 0x40
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fac:	e841 2300 	strex	r3, r2, [r1]
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e5      	bne.n	8001f84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3314      	adds	r3, #20
 8001fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	e853 3f00 	ldrex	r3, [r3]
 8001fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3314      	adds	r3, #20
 8001fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe0:	e841 2300 	strex	r3, r2, [r1]
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e5      	bne.n	8001fb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d119      	bne.n	8002028 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	e853 3f00 	ldrex	r3, [r3]
 8002002:	60bb      	str	r3, [r7, #8]
   return(result);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f023 0310 	bic.w	r3, r3, #16
 800200a:	647b      	str	r3, [r7, #68]	; 0x44
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	330c      	adds	r3, #12
 8002012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002014:	61ba      	str	r2, [r7, #24]
 8002016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002018:	6979      	ldr	r1, [r7, #20]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	e841 2300 	strex	r3, r2, [r1]
 8002020:	613b      	str	r3, [r7, #16]
   return(result);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e5      	bne.n	8001ff4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002036:	bf00      	nop
 8002038:	3754      	adds	r7, #84	; 0x54
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff ff39 	bl	8001ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b21      	cmp	r3, #33	; 0x21
 800207c:	d13e      	bne.n	80020fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002086:	d114      	bne.n	80020b2 <UART_Transmit_IT+0x48>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d110      	bne.n	80020b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	1c9a      	adds	r2, r3, #2
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	621a      	str	r2, [r3, #32]
 80020b0:	e008      	b.n	80020c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6211      	str	r1, [r2, #32]
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4619      	mov	r1, r3
 80020d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10f      	bne.n	80020f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002120:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fec8 	bl	8001ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b08c      	sub	sp, #48	; 0x30
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b22      	cmp	r3, #34	; 0x22
 800214c:	f040 80ab 	bne.w	80022a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002158:	d117      	bne.n	800218a <UART_Receive_IT+0x50>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d113      	bne.n	800218a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002162:	2300      	movs	r3, #0
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002178:	b29a      	uxth	r2, r3
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	1c9a      	adds	r2, r3, #2
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
 8002188:	e026      	b.n	80021d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219c:	d007      	beq.n	80021ae <UART_Receive_IT+0x74>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <UART_Receive_IT+0x82>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e008      	b.n	80021ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4619      	mov	r1, r3
 80021e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d15a      	bne.n	80022a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0220 	bic.w	r2, r2, #32
 80021fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800220a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	2b01      	cmp	r3, #1
 800222a:	d135      	bne.n	8002298 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	330c      	adds	r3, #12
 8002238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	e853 3f00 	ldrex	r3, [r3]
 8002240:	613b      	str	r3, [r7, #16]
   return(result);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f023 0310 	bic.w	r3, r3, #16
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	330c      	adds	r3, #12
 8002250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002252:	623a      	str	r2, [r7, #32]
 8002254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002256:	69f9      	ldr	r1, [r7, #28]
 8002258:	6a3a      	ldr	r2, [r7, #32]
 800225a:	e841 2300 	strex	r3, r2, [r1]
 800225e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1e5      	bne.n	8002232 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b10      	cmp	r3, #16
 8002272:	d10a      	bne.n	800228a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff fe29 	bl	8001ee8 <HAL_UARTEx_RxEventCallback>
 8002296:	e002      	b.n	800229e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fbd1 	bl	8002a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e002      	b.n	80022a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3730      	adds	r7, #48	; 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b4:	b0c0      	sub	sp, #256	; 0x100
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	ea40 0301 	orr.w	r3, r0, r1
 80022d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002308:	f021 010c 	bic.w	r1, r1, #12
 800230c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002316:	430b      	orrs	r3, r1
 8002318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800231a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232a:	6999      	ldr	r1, [r3, #24]
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	ea40 0301 	orr.w	r3, r0, r1
 8002336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b8f      	ldr	r3, [pc, #572]	; (800257c <UART_SetConfig+0x2cc>)
 8002340:	429a      	cmp	r2, r3
 8002342:	d005      	beq.n	8002350 <UART_SetConfig+0xa0>
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b8d      	ldr	r3, [pc, #564]	; (8002580 <UART_SetConfig+0x2d0>)
 800234c:	429a      	cmp	r2, r3
 800234e:	d104      	bne.n	800235a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002350:	f7ff fa52 	bl	80017f8 <HAL_RCC_GetPCLK2Freq>
 8002354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002358:	e003      	b.n	8002362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800235a:	f7ff fa39 	bl	80017d0 <HAL_RCC_GetPCLK1Freq>
 800235e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800236c:	f040 810c 	bne.w	8002588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002374:	2200      	movs	r2, #0
 8002376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800237a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800237e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002382:	4622      	mov	r2, r4
 8002384:	462b      	mov	r3, r5
 8002386:	1891      	adds	r1, r2, r2
 8002388:	65b9      	str	r1, [r7, #88]	; 0x58
 800238a:	415b      	adcs	r3, r3
 800238c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800238e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002392:	4621      	mov	r1, r4
 8002394:	eb12 0801 	adds.w	r8, r2, r1
 8002398:	4629      	mov	r1, r5
 800239a:	eb43 0901 	adc.w	r9, r3, r1
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b2:	4690      	mov	r8, r2
 80023b4:	4699      	mov	r9, r3
 80023b6:	4623      	mov	r3, r4
 80023b8:	eb18 0303 	adds.w	r3, r8, r3
 80023bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023c0:	462b      	mov	r3, r5
 80023c2:	eb49 0303 	adc.w	r3, r9, r3
 80023c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023de:	460b      	mov	r3, r1
 80023e0:	18db      	adds	r3, r3, r3
 80023e2:	653b      	str	r3, [r7, #80]	; 0x50
 80023e4:	4613      	mov	r3, r2
 80023e6:	eb42 0303 	adc.w	r3, r2, r3
 80023ea:	657b      	str	r3, [r7, #84]	; 0x54
 80023ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80023f4:	f7fd feec 	bl	80001d0 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4b61      	ldr	r3, [pc, #388]	; (8002584 <UART_SetConfig+0x2d4>)
 80023fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	011c      	lsls	r4, r3, #4
 8002406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002418:	4642      	mov	r2, r8
 800241a:	464b      	mov	r3, r9
 800241c:	1891      	adds	r1, r2, r2
 800241e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002420:	415b      	adcs	r3, r3
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002428:	4641      	mov	r1, r8
 800242a:	eb12 0a01 	adds.w	sl, r2, r1
 800242e:	4649      	mov	r1, r9
 8002430:	eb43 0b01 	adc.w	fp, r3, r1
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002448:	4692      	mov	sl, r2
 800244a:	469b      	mov	fp, r3
 800244c:	4643      	mov	r3, r8
 800244e:	eb1a 0303 	adds.w	r3, sl, r3
 8002452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002456:	464b      	mov	r3, r9
 8002458:	eb4b 0303 	adc.w	r3, fp, r3
 800245c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800246c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002474:	460b      	mov	r3, r1
 8002476:	18db      	adds	r3, r3, r3
 8002478:	643b      	str	r3, [r7, #64]	; 0x40
 800247a:	4613      	mov	r3, r2
 800247c:	eb42 0303 	adc.w	r3, r2, r3
 8002480:	647b      	str	r3, [r7, #68]	; 0x44
 8002482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800248a:	f7fd fea1 	bl	80001d0 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4611      	mov	r1, r2
 8002494:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <UART_SetConfig+0x2d4>)
 8002496:	fba3 2301 	umull	r2, r3, r3, r1
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2264      	movs	r2, #100	; 0x64
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	1acb      	subs	r3, r1, r3
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024aa:	4b36      	ldr	r3, [pc, #216]	; (8002584 <UART_SetConfig+0x2d4>)
 80024ac:	fba3 2302 	umull	r2, r3, r3, r2
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024b8:	441c      	add	r4, r3
 80024ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024cc:	4642      	mov	r2, r8
 80024ce:	464b      	mov	r3, r9
 80024d0:	1891      	adds	r1, r2, r2
 80024d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024d4:	415b      	adcs	r3, r3
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024dc:	4641      	mov	r1, r8
 80024de:	1851      	adds	r1, r2, r1
 80024e0:	6339      	str	r1, [r7, #48]	; 0x30
 80024e2:	4649      	mov	r1, r9
 80024e4:	414b      	adcs	r3, r1
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80024f4:	4659      	mov	r1, fp
 80024f6:	00cb      	lsls	r3, r1, #3
 80024f8:	4651      	mov	r1, sl
 80024fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024fe:	4651      	mov	r1, sl
 8002500:	00ca      	lsls	r2, r1, #3
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	4603      	mov	r3, r0
 8002508:	4642      	mov	r2, r8
 800250a:	189b      	adds	r3, r3, r2
 800250c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002510:	464b      	mov	r3, r9
 8002512:	460a      	mov	r2, r1
 8002514:	eb42 0303 	adc.w	r3, r2, r3
 8002518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800252c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002530:	460b      	mov	r3, r1
 8002532:	18db      	adds	r3, r3, r3
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
 8002536:	4613      	mov	r3, r2
 8002538:	eb42 0303 	adc.w	r3, r2, r3
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002546:	f7fd fe43 	bl	80001d0 <__aeabi_uldivmod>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <UART_SetConfig+0x2d4>)
 8002550:	fba3 1302 	umull	r1, r3, r3, r2
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	2164      	movs	r1, #100	; 0x64
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	3332      	adds	r3, #50	; 0x32
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <UART_SetConfig+0x2d4>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	f003 0207 	and.w	r2, r3, #7
 800256e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4422      	add	r2, r4
 8002576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002578:	e106      	b.n	8002788 <UART_SetConfig+0x4d8>
 800257a:	bf00      	nop
 800257c:	40011000 	.word	0x40011000
 8002580:	40011400 	.word	0x40011400
 8002584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800258c:	2200      	movs	r2, #0
 800258e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800259a:	4642      	mov	r2, r8
 800259c:	464b      	mov	r3, r9
 800259e:	1891      	adds	r1, r2, r2
 80025a0:	6239      	str	r1, [r7, #32]
 80025a2:	415b      	adcs	r3, r3
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
 80025a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025aa:	4641      	mov	r1, r8
 80025ac:	1854      	adds	r4, r2, r1
 80025ae:	4649      	mov	r1, r9
 80025b0:	eb43 0501 	adc.w	r5, r3, r1
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	00eb      	lsls	r3, r5, #3
 80025be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c2:	00e2      	lsls	r2, r4, #3
 80025c4:	4614      	mov	r4, r2
 80025c6:	461d      	mov	r5, r3
 80025c8:	4643      	mov	r3, r8
 80025ca:	18e3      	adds	r3, r4, r3
 80025cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025d0:	464b      	mov	r3, r9
 80025d2:	eb45 0303 	adc.w	r3, r5, r3
 80025d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025f6:	4629      	mov	r1, r5
 80025f8:	008b      	lsls	r3, r1, #2
 80025fa:	4621      	mov	r1, r4
 80025fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002600:	4621      	mov	r1, r4
 8002602:	008a      	lsls	r2, r1, #2
 8002604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002608:	f7fd fde2 	bl	80001d0 <__aeabi_uldivmod>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4b60      	ldr	r3, [pc, #384]	; (8002794 <UART_SetConfig+0x4e4>)
 8002612:	fba3 2302 	umull	r2, r3, r3, r2
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	011c      	lsls	r4, r3, #4
 800261a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800261e:	2200      	movs	r2, #0
 8002620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800262c:	4642      	mov	r2, r8
 800262e:	464b      	mov	r3, r9
 8002630:	1891      	adds	r1, r2, r2
 8002632:	61b9      	str	r1, [r7, #24]
 8002634:	415b      	adcs	r3, r3
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263c:	4641      	mov	r1, r8
 800263e:	1851      	adds	r1, r2, r1
 8002640:	6139      	str	r1, [r7, #16]
 8002642:	4649      	mov	r1, r9
 8002644:	414b      	adcs	r3, r1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002654:	4659      	mov	r1, fp
 8002656:	00cb      	lsls	r3, r1, #3
 8002658:	4651      	mov	r1, sl
 800265a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800265e:	4651      	mov	r1, sl
 8002660:	00ca      	lsls	r2, r1, #3
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	4603      	mov	r3, r0
 8002668:	4642      	mov	r2, r8
 800266a:	189b      	adds	r3, r3, r2
 800266c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002670:	464b      	mov	r3, r9
 8002672:	460a      	mov	r2, r1
 8002674:	eb42 0303 	adc.w	r3, r2, r3
 8002678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	67bb      	str	r3, [r7, #120]	; 0x78
 8002686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002694:	4649      	mov	r1, r9
 8002696:	008b      	lsls	r3, r1, #2
 8002698:	4641      	mov	r1, r8
 800269a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800269e:	4641      	mov	r1, r8
 80026a0:	008a      	lsls	r2, r1, #2
 80026a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026a6:	f7fd fd93 	bl	80001d0 <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	4b38      	ldr	r3, [pc, #224]	; (8002794 <UART_SetConfig+0x4e4>)
 80026b2:	fba3 2301 	umull	r2, r3, r3, r1
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2264      	movs	r2, #100	; 0x64
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	1acb      	subs	r3, r1, r3
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	3332      	adds	r3, #50	; 0x32
 80026c4:	4a33      	ldr	r2, [pc, #204]	; (8002794 <UART_SetConfig+0x4e4>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d0:	441c      	add	r4, r3
 80026d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d6:	2200      	movs	r2, #0
 80026d8:	673b      	str	r3, [r7, #112]	; 0x70
 80026da:	677a      	str	r2, [r7, #116]	; 0x74
 80026dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026e0:	4642      	mov	r2, r8
 80026e2:	464b      	mov	r3, r9
 80026e4:	1891      	adds	r1, r2, r2
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	415b      	adcs	r3, r3
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026f0:	4641      	mov	r1, r8
 80026f2:	1851      	adds	r1, r2, r1
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	4649      	mov	r1, r9
 80026f8:	414b      	adcs	r3, r1
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002708:	4659      	mov	r1, fp
 800270a:	00cb      	lsls	r3, r1, #3
 800270c:	4651      	mov	r1, sl
 800270e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002712:	4651      	mov	r1, sl
 8002714:	00ca      	lsls	r2, r1, #3
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	4603      	mov	r3, r0
 800271c:	4642      	mov	r2, r8
 800271e:	189b      	adds	r3, r3, r2
 8002720:	66bb      	str	r3, [r7, #104]	; 0x68
 8002722:	464b      	mov	r3, r9
 8002724:	460a      	mov	r2, r1
 8002726:	eb42 0303 	adc.w	r3, r2, r3
 800272a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	663b      	str	r3, [r7, #96]	; 0x60
 8002736:	667a      	str	r2, [r7, #100]	; 0x64
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002744:	4649      	mov	r1, r9
 8002746:	008b      	lsls	r3, r1, #2
 8002748:	4641      	mov	r1, r8
 800274a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800274e:	4641      	mov	r1, r8
 8002750:	008a      	lsls	r2, r1, #2
 8002752:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002756:	f7fd fd3b 	bl	80001d0 <__aeabi_uldivmod>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <UART_SetConfig+0x4e4>)
 8002760:	fba3 1302 	umull	r1, r3, r3, r2
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	2164      	movs	r1, #100	; 0x64
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	3332      	adds	r3, #50	; 0x32
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <UART_SetConfig+0x4e4>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4422      	add	r2, r4
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800278e:	46bd      	mov	sp, r7
 8002790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002794:	51eb851f 	.word	0x51eb851f

08002798 <SystemClock_Config>:
 *      Author: mikita.shary
 */
#include "clk.h"


void SystemClock_Config(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b094      	sub	sp, #80	; 0x50
 800279c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800279e:	f107 0320 	add.w	r3, r7, #32
 80027a2:	2230      	movs	r2, #48	; 0x30
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fc48 	bl	800603c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027ac:	f107 030c 	add.w	r3, r7, #12
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	4b28      	ldr	r3, [pc, #160]	; (8002864 <SystemClock_Config+0xcc>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4a27      	ldr	r2, [pc, #156]	; (8002864 <SystemClock_Config+0xcc>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ca:	6413      	str	r3, [r2, #64]	; 0x40
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <SystemClock_Config+0xcc>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <SystemClock_Config+0xd0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a21      	ldr	r2, [pc, #132]	; (8002868 <SystemClock_Config+0xd0>)
 80027e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <SystemClock_Config+0xd0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027fe:	2302      	movs	r3, #2
 8002800:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = RCC_PLL_PLLM;
 8002808:	2304      	movs	r3, #4
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = RCC_PLL_PLLN;
 800280c:	23a8      	movs	r3, #168	; 0xa8
 800280e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002810:	2302      	movs	r3, #2
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLL_PLLQ;
 8002814:	2304      	movs	r3, #4
 8002816:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002818:	f107 0320 	add.w	r3, r7, #32
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fb67 	bl	8000ef0 <HAL_RCC_OscConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <SystemClock_Config+0x94>
		Error_Handler();
 8002828:	f7fd fe7c 	bl	8000524 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800282c:	230f      	movs	r3, #15
 800282e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002830:	2302      	movs	r3, #2
 8002832:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002838:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800283c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800283e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002842:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	2105      	movs	r1, #5
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fdc8 	bl	80013e0 <HAL_RCC_ClockConfig>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <SystemClock_Config+0xc2>
		Error_Handler();
 8002856:	f7fd fe65 	bl	8000524 <Error_Handler>
	}
}
 800285a:	bf00      	nop
 800285c:	3750      	adds	r7, #80	; 0x50
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000

0800286c <MX_GPIO_Init>:
 *  Created on: Aug 23, 2023
 *      Author: mikita.shary
 */
#include "gpio.h"

void MX_GPIO_Init(void) {
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <MX_GPIO_Init+0x68>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <MX_GPIO_Init+0x68>)
 800287c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <MX_GPIO_Init+0x68>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <MX_GPIO_Init+0x68>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <MX_GPIO_Init+0x68>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <MX_GPIO_Init+0x68>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <MX_GPIO_Init+0x68>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <MX_GPIO_Init+0x68>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <MX_GPIO_Init+0x68>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800

080028d8 <uart6_task_func>:
/**
 * @brief Function implementing the uart6_task thread.
 * @param argument: Not used
 * @retval None
 */
static void uart6_task_func(void *argument) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {
		xQueueReceive(uart2_to_uart6_queueHandle, &tx_data_uart6,
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <uart6_task_func+0x2c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <uart6_task_func+0x30>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 f87a 	bl	80039e4 <xQueueReceive>
		portMAX_DELAY);
		HAL_UART_Transmit_IT(&huart6, &tx_data_uart6, 1);
 80028f0:	2201      	movs	r2, #1
 80028f2:	4905      	ldr	r1, [pc, #20]	; (8002908 <uart6_task_func+0x30>)
 80028f4:	4805      	ldr	r0, [pc, #20]	; (800290c <uart6_task_func+0x34>)
 80028f6:	f7fe ffe0 	bl	80018ba <HAL_UART_Transmit_IT>
		osDelay(1);
 80028fa:	2001      	movs	r0, #1
 80028fc:	f000 fa60 	bl	8002dc0 <osDelay>
		xQueueReceive(uart2_to_uart6_queueHandle, &tx_data_uart6,
 8002900:	e7ee      	b.n	80028e0 <uart6_task_func+0x8>
 8002902:	bf00      	nop
 8002904:	20000114 	.word	0x20000114
 8002908:	20000127 	.word	0x20000127
 800290c:	200000c8 	.word	0x200000c8

08002910 <uart2_task_func>:
/**
 * @brief Function implementing the uart2_task thread.
 * @param argument: Not used
 * @retval None
 */
static void uart2_task_func(void *argument) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {
		xQueueReceive(uart6_to_uart2_queueHandle, &tx_data_uart2,
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <uart2_task_func+0x2c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <uart2_task_func+0x30>)
 8002922:	4618      	mov	r0, r3
 8002924:	f001 f85e 	bl	80039e4 <xQueueReceive>
		portMAX_DELAY);
		HAL_UART_Transmit_IT(&huart2, &tx_data_uart2, 1);
 8002928:	2201      	movs	r2, #1
 800292a:	4905      	ldr	r1, [pc, #20]	; (8002940 <uart2_task_func+0x30>)
 800292c:	4805      	ldr	r0, [pc, #20]	; (8002944 <uart2_task_func+0x34>)
 800292e:	f7fe ffc4 	bl	80018ba <HAL_UART_Transmit_IT>
		osDelay(1);
 8002932:	2001      	movs	r0, #1
 8002934:	f000 fa44 	bl	8002dc0 <osDelay>
		xQueueReceive(uart6_to_uart2_queueHandle, &tx_data_uart2,
 8002938:	e7ee      	b.n	8002918 <uart2_task_func+0x8>
 800293a:	bf00      	nop
 800293c:	20000118 	.word	0x20000118
 8002940:	20000124 	.word	0x20000124
 8002944:	20000084 	.word	0x20000084

08002948 <MX_USART2_UART_Init>:
	}
}

void MX_USART2_UART_Init(void) {
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 0 */
	osMutexAcquire(uart2_mutexHandle, portMAX_DELAY);
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <MX_USART2_UART_Init+0x6c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fad4 	bl	8002f02 <osMutexAcquire>
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <MX_USART2_UART_Init+0x74>)
 800295e:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 8002962:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002966:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 800297c:	220c      	movs	r2, #12
 800297e:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002980:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800298c:	480a      	ldr	r0, [pc, #40]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 800298e:	f7fe ff47 	bl	8001820 <HAL_UART_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_USART2_UART_Init+0x54>
		Error_Handler();
 8002998:	f7fd fdc4 	bl	8000524 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	HAL_UART_Receive_IT(&huart2, &rx_data_uart2, 1);
 800299c:	2201      	movs	r2, #1
 800299e:	4908      	ldr	r1, [pc, #32]	; (80029c0 <MX_USART2_UART_Init+0x78>)
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <MX_USART2_UART_Init+0x70>)
 80029a2:	f7fe ffcf 	bl	8001944 <HAL_UART_Receive_IT>
	/* USER CODE END USART2_Init 2 */
	osMutexRelease(uart2_mutexHandle);
 80029a6:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <MX_USART2_UART_Init+0x6c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 faf4 	bl	8002f98 <osMutexRelease>

}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	2000011c 	.word	0x2000011c
 80029b8:	20000084 	.word	0x20000084
 80029bc:	40004400 	.word	0x40004400
 80029c0:	20000125 	.word	0x20000125

080029c4 <MX_USART6_UART_Init>:

void MX_USART6_UART_Init(void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART6_Init 0 */
	osMutexAcquire(uart6_mutexHandle, portMAX_DELAY);
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <MX_USART6_UART_Init+0x6c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fa96 	bl	8002f02 <osMutexAcquire>
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 80029d8:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <MX_USART6_UART_Init+0x74>)
 80029da:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = UART_BAUD_RATE_115200;
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 80029de:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029e2:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 80029f8:	220c      	movs	r2, #12
 80029fa:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002a08:	480a      	ldr	r0, [pc, #40]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 8002a0a:	f7fe ff09 	bl	8001820 <HAL_UART_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_USART6_UART_Init+0x54>
		Error_Handler();
 8002a14:	f7fd fd86 	bl	8000524 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */
	HAL_UART_Receive_IT(&huart6, &rx_data_uart6, 1);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4908      	ldr	r1, [pc, #32]	; (8002a3c <MX_USART6_UART_Init+0x78>)
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <MX_USART6_UART_Init+0x70>)
 8002a1e:	f7fe ff91 	bl	8001944 <HAL_UART_Receive_IT>
	osMutexRelease(uart6_mutexHandle);
 8002a22:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <MX_USART6_UART_Init+0x6c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fab6 	bl	8002f98 <osMutexRelease>
	/* USER CODE END USART6_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000120 	.word	0x20000120
 8002a34:	200000c8 	.word	0x200000c8
 8002a38:	40011400 	.word	0x40011400
 8002a3c:	20000126 	.word	0x20000126

08002a40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_UART_RxCpltCallback+0x58>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d10b      	bne.n	8002a6c <HAL_UART_RxCpltCallback+0x2c>
		xQueueSendFromISR(uart2_to_uart6_queueHandle, &rx_data_uart2, pdFALSE);
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_UART_RxCpltCallback+0x5c>)
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4910      	ldr	r1, [pc, #64]	; (8002aa0 <HAL_UART_RxCpltCallback+0x60>)
 8002a5e:	f000 ff25 	bl	80038ac <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart2, &rx_data_uart2, 1);
 8002a62:	2201      	movs	r2, #1
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_UART_RxCpltCallback+0x60>)
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <HAL_UART_RxCpltCallback+0x58>)
 8002a68:	f7fe ff6c 	bl	8001944 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == huart6.Instance) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_UART_RxCpltCallback+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d10b      	bne.n	8002a90 <HAL_UART_RxCpltCallback+0x50>
		xQueueSendFromISR(uart6_to_uart2_queueHandle, &rx_data_uart6, pdFALSE);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_UART_RxCpltCallback+0x68>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2200      	movs	r2, #0
 8002a80:	490a      	ldr	r1, [pc, #40]	; (8002aac <HAL_UART_RxCpltCallback+0x6c>)
 8002a82:	f000 ff13 	bl	80038ac <xQueueGenericSendFromISR>
		HAL_UART_Receive_IT(&huart6, &rx_data_uart6, 1);
 8002a86:	2201      	movs	r2, #1
 8002a88:	4908      	ldr	r1, [pc, #32]	; (8002aac <HAL_UART_RxCpltCallback+0x6c>)
 8002a8a:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <HAL_UART_RxCpltCallback+0x64>)
 8002a8c:	f7fe ff5a 	bl	8001944 <HAL_UART_Receive_IT>
	}
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000084 	.word	0x20000084
 8002a9c:	20000114 	.word	0x20000114
 8002aa0:	20000125 	.word	0x20000125
 8002aa4:	200000c8 	.word	0x200000c8
 8002aa8:	20000118 	.word	0x20000118
 8002aac:	20000126 	.word	0x20000126

08002ab0 <uart2_task_init>:

uint8_t uart2_task_init() {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0

	uint8_t res = pdFAIL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	71fb      	strb	r3, [r7, #7]

	/* creation of uart2_to_uart6_queue */
	uart2_to_uart6_queueHandle = osMessageQueueNew(16, sizeof(uint8_t),
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <uart2_task_init+0x5c>)
 8002abc:	2101      	movs	r1, #1
 8002abe:	2010      	movs	r0, #16
 8002ac0:	f000 faa7 	bl	8003012 <osMessageQueueNew>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <uart2_task_init+0x60>)
 8002ac8:	6013      	str	r3, [r2, #0]
			&uart2_to_uart6_queue_attributes);

	/* creation of uart2_task */
	uart2_taskHandle = osThreadNew(uart2_task_func, NULL,
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <uart2_task_init+0x64>)
 8002acc:	2100      	movs	r1, #0
 8002ace:	4812      	ldr	r0, [pc, #72]	; (8002b18 <uart2_task_init+0x68>)
 8002ad0:	f000 f8e4 	bl	8002c9c <osThreadNew>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <uart2_task_init+0x6c>)
 8002ad8:	6013      	str	r3, [r2, #0]
			&uart2_task_attributes);

	/* creation of uart2_mutex */
	uart2_mutexHandle = osMutexNew(&uart2_mutex_attributes);
 8002ada:	4811      	ldr	r0, [pc, #68]	; (8002b20 <uart2_task_init+0x70>)
 8002adc:	f000 f98b 	bl	8002df6 <osMutexNew>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <uart2_task_init+0x74>)
 8002ae4:	6013      	str	r3, [r2, #0]

	if (uart2_to_uart6_queueHandle != NULL && uart2_taskHandle != NULL
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <uart2_task_init+0x60>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <uart2_task_init+0x52>
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <uart2_task_init+0x6c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <uart2_task_init+0x52>
			&& uart2_mutexHandle != NULL) {
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <uart2_task_init+0x74>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <uart2_task_init+0x52>
		res = pdPASS;
 8002afe:	2301      	movs	r3, #1
 8002b00:	71fb      	strb	r3, [r7, #7]
	}
	return res;
 8002b02:	79fb      	ldrb	r3, [r7, #7]

}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08006330 	.word	0x08006330
 8002b10:	20000114 	.word	0x20000114
 8002b14:	0800630c 	.word	0x0800630c
 8002b18:	08002911 	.word	0x08002911
 8002b1c:	20000110 	.word	0x20000110
 8002b20:	08006360 	.word	0x08006360
 8002b24:	2000011c 	.word	0x2000011c

08002b28 <uart6_task_init>:

uint8_t uart6_task_init(void) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0

	uint8_t res = pdFAIL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	71fb      	strb	r3, [r7, #7]

	/* creation of uart6_to_uart2_queue */
	uart6_to_uart2_queueHandle = osMessageQueueNew(16, sizeof(uint8_t),
 8002b32:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <uart6_task_init+0x5c>)
 8002b34:	2101      	movs	r1, #1
 8002b36:	2010      	movs	r0, #16
 8002b38:	f000 fa6b 	bl	8003012 <osMessageQueueNew>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <uart6_task_init+0x60>)
 8002b40:	6013      	str	r3, [r2, #0]
			&uart6_to_uart2_queue_attributes);

	/* creation of uart6_task */
	uart6_taskHandle = osThreadNew(uart6_task_func, NULL,
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <uart6_task_init+0x64>)
 8002b44:	2100      	movs	r1, #0
 8002b46:	4812      	ldr	r0, [pc, #72]	; (8002b90 <uart6_task_init+0x68>)
 8002b48:	f000 f8a8 	bl	8002c9c <osThreadNew>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <uart6_task_init+0x6c>)
 8002b50:	6013      	str	r3, [r2, #0]
			&uart6_task_attributes);

	/* creation of uart6_mutex */
	uart6_mutexHandle = osMutexNew(&uart6_mutex_attributes);
 8002b52:	4811      	ldr	r0, [pc, #68]	; (8002b98 <uart6_task_init+0x70>)
 8002b54:	f000 f94f 	bl	8002df6 <osMutexNew>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a10      	ldr	r2, [pc, #64]	; (8002b9c <uart6_task_init+0x74>)
 8002b5c:	6013      	str	r3, [r2, #0]

	if (uart6_to_uart2_queueHandle != NULL && uart6_taskHandle != NULL
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <uart6_task_init+0x60>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <uart6_task_init+0x52>
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <uart6_task_init+0x6c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <uart6_task_init+0x52>
			&& uart6_mutexHandle != NULL) {
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <uart6_task_init+0x74>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <uart6_task_init+0x52>
		res = pdPASS;
 8002b76:	2301      	movs	r3, #1
 8002b78:	71fb      	strb	r3, [r7, #7]
	}
	return res;
 8002b7a:	79fb      	ldrb	r3, [r7, #7]

}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	08006348 	.word	0x08006348
 8002b88:	20000118 	.word	0x20000118
 8002b8c:	080062e8 	.word	0x080062e8
 8002b90:	080028d9 	.word	0x080028d9
 8002b94:	2000010c 	.word	0x2000010c
 8002b98:	08006370 	.word	0x08006370
 8002b9c:	20000120 	.word	0x20000120

08002ba0 <__NVIC_SetPriority>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f06f 0004 	mvn.w	r0, #4
 8002bfe:	f7ff ffcf 	bl	8002ba0 <__NVIC_SetPriority>
#endif
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c0e:	f3ef 8305 	mrs	r3, IPSR
 8002c12:	603b      	str	r3, [r7, #0]
  return(result);
 8002c14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c1a:	f06f 0305 	mvn.w	r3, #5
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	e00c      	b.n	8002c3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <osKernelInitialize+0x44>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <osKernelInitialize+0x44>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	e002      	b.n	8002c3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c3c:	687b      	ldr	r3, [r7, #4]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000128 	.word	0x20000128

08002c50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c56:	f3ef 8305 	mrs	r3, IPSR
 8002c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8002c5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c62:	f06f 0305 	mvn.w	r3, #5
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	e010      	b.n	8002c8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <osKernelStart+0x48>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d109      	bne.n	8002c86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c72:	f7ff ffbf 	bl	8002bf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <osKernelStart+0x48>)
 8002c78:	2202      	movs	r2, #2
 8002c7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c7c:	f001 fc10 	bl	80044a0 <vTaskStartScheduler>
      stat = osOK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	e002      	b.n	8002c8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c8c:	687b      	ldr	r3, [r7, #4]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000128 	.word	0x20000128

08002c9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08e      	sub	sp, #56	; 0x38
 8002ca0:	af04      	add	r7, sp, #16
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cac:	f3ef 8305 	mrs	r3, IPSR
 8002cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8002cb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d17e      	bne.n	8002db6 <osThreadNew+0x11a>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d07b      	beq.n	8002db6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002cc2:	2318      	movs	r3, #24
 8002cc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d045      	beq.n	8002d62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <osThreadNew+0x48>
        name = attr->name;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <osThreadNew+0x6e>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b38      	cmp	r3, #56	; 0x38
 8002cfc:	d805      	bhi.n	8002d0a <osThreadNew+0x6e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <osThreadNew+0x72>
        return (NULL);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e054      	b.n	8002db8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00e      	beq.n	8002d44 <osThreadNew+0xa8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2ba7      	cmp	r3, #167	; 0xa7
 8002d2c:	d90a      	bls.n	8002d44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <osThreadNew+0xa8>
        mem = 1;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	e010      	b.n	8002d66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10c      	bne.n	8002d66 <osThreadNew+0xca>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <osThreadNew+0xca>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <osThreadNew+0xca>
          mem = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e001      	b.n	8002d66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d110      	bne.n	8002d8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d74:	9202      	str	r2, [sp, #8]
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f001 f9a0 	bl	80040c8 <xTaskCreateStatic>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e013      	b.n	8002db6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d110      	bne.n	8002db6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	f107 0310 	add.w	r3, r7, #16
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f001 f9eb 	bl	8004182 <xTaskCreate>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d001      	beq.n	8002db6 <osThreadNew+0x11a>
            hTask = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002db6:	693b      	ldr	r3, [r7, #16]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3728      	adds	r7, #40	; 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc8:	f3ef 8305 	mrs	r3, IPSR
 8002dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <osDelay+0x1c>
    stat = osErrorISR;
 8002dd4:	f06f 0305 	mvn.w	r3, #5
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e007      	b.n	8002dec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <osDelay+0x2c>
      vTaskDelay(ticks);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f001 fb26 	bl	8004438 <vTaskDelay>
    }
  }

  return (stat);
 8002dec:	68fb      	ldr	r3, [r7, #12]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b088      	sub	sp, #32
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e02:	f3ef 8305 	mrs	r3, IPSR
 8002e06:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e08:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d174      	bne.n	8002ef8 <osMutexNew+0x102>
    if (attr != NULL) {
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <osMutexNew+0x26>
      type = attr->attr_bits;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e001      	b.n	8002e20 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <osMutexNew+0x3a>
      rmtx = 1U;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e001      	b.n	8002e34 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d15c      	bne.n	8002ef8 <osMutexNew+0x102>
      mem = -1;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d015      	beq.n	8002e76 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <osMutexNew+0x6a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b4f      	cmp	r3, #79	; 0x4f
 8002e58:	d902      	bls.n	8002e60 <osMutexNew+0x6a>
          mem = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	e00c      	b.n	8002e7a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <osMutexNew+0x84>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <osMutexNew+0x84>
            mem = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	e001      	b.n	8002e7a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d112      	bne.n	8002ea6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2004      	movs	r0, #4
 8002e8e:	f000 fb8a 	bl	80035a6 <xQueueCreateMutexStatic>
 8002e92:	61f8      	str	r0, [r7, #28]
 8002e94:	e016      	b.n	8002ec4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f000 fb82 	bl	80035a6 <xQueueCreateMutexStatic>
 8002ea2:	61f8      	str	r0, [r7, #28]
 8002ea4:	e00e      	b.n	8002ec4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002eb2:	2004      	movs	r0, #4
 8002eb4:	f000 fb5f 	bl	8003576 <xQueueCreateMutex>
 8002eb8:	61f8      	str	r0, [r7, #28]
 8002eba:	e003      	b.n	8002ec4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f000 fb5a 	bl	8003576 <xQueueCreateMutex>
 8002ec2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <osMutexNew+0xee>
        if (attr != NULL) {
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <osMutexNew+0xe2>
          name = attr->name;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e001      	b.n	8002edc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002edc:	68f9      	ldr	r1, [r7, #12]
 8002ede:	69f8      	ldr	r0, [r7, #28]
 8002ee0:	f001 f894 	bl	800400c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <osMutexNew+0x102>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f20:	f3ef 8305 	mrs	r3, IPSR
 8002f24:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002f2c:	f06f 0305 	mvn.w	r3, #5
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e02c      	b.n	8002f8e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002f3a:	f06f 0303 	mvn.w	r3, #3
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e025      	b.n	8002f8e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d011      	beq.n	8002f6c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002f48:	6839      	ldr	r1, [r7, #0]
 8002f4a:	6938      	ldr	r0, [r7, #16]
 8002f4c:	f000 fb7a 	bl	8003644 <xQueueTakeMutexRecursive>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d01b      	beq.n	8002f8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002f5c:	f06f 0301 	mvn.w	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e014      	b.n	8002f8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002f64:	f06f 0302 	mvn.w	r3, #2
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e010      	b.n	8002f8e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	6938      	ldr	r0, [r7, #16]
 8002f70:	f000 fe18 	bl	8003ba4 <xQueueSemaphoreTake>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d009      	beq.n	8002f8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002f80:	f06f 0301 	mvn.w	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e002      	b.n	8002f8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002f88:	f06f 0302 	mvn.w	r3, #2
 8002f8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8002f8e:	697b      	ldr	r3, [r7, #20]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fb4:	f3ef 8305 	mrs	r3, IPSR
 8002fb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8002fc0:	f06f 0305 	mvn.w	r3, #5
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e01f      	b.n	8003008 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8002fce:	f06f 0303 	mvn.w	r3, #3
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e018      	b.n	8003008 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002fdc:	6938      	ldr	r0, [r7, #16]
 8002fde:	f000 fafd 	bl	80035dc <xQueueGiveMutexRecursive>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d00f      	beq.n	8003008 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002fe8:	f06f 0302 	mvn.w	r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	e00b      	b.n	8003008 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	6938      	ldr	r0, [r7, #16]
 8002ff8:	f000 fb5a 	bl	80036b0 <xQueueGenericSend>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d002      	beq.n	8003008 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003002:	f06f 0302 	mvn.w	r3, #2
 8003006:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003008:	697b      	ldr	r3, [r7, #20]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003012:	b580      	push	{r7, lr}
 8003014:	b08a      	sub	sp, #40	; 0x28
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003022:	f3ef 8305 	mrs	r3, IPSR
 8003026:	613b      	str	r3, [r7, #16]
  return(result);
 8003028:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800302a:	2b00      	cmp	r3, #0
 800302c:	d15f      	bne.n	80030ee <osMessageQueueNew+0xdc>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <osMessageQueueNew+0xdc>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d059      	beq.n	80030ee <osMessageQueueNew+0xdc>
    mem = -1;
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d029      	beq.n	800309a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d012      	beq.n	8003074 <osMessageQueueNew+0x62>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b4f      	cmp	r3, #79	; 0x4f
 8003054:	d90e      	bls.n	8003074 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <osMessageQueueNew+0x62>
        mem = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	e014      	b.n	800309e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d110      	bne.n	800309e <osMessageQueueNew+0x8c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10c      	bne.n	800309e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003088:	2b00      	cmp	r3, #0
 800308a:	d108      	bne.n	800309e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <osMessageQueueNew+0x8c>
          mem = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	e001      	b.n	800309e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10b      	bne.n	80030bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2100      	movs	r1, #0
 80030ae:	9100      	str	r1, [sp, #0]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f970 	bl	8003398 <xQueueGenericCreateStatic>
 80030b8:	61f8      	str	r0, [r7, #28]
 80030ba:	e008      	b.n	80030ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80030c2:	2200      	movs	r2, #0
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f9de 	bl	8003488 <xQueueGenericCreate>
 80030cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00c      	beq.n	80030ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e001      	b.n	80030e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	69f8      	ldr	r0, [r7, #28]
 80030ea:	f000 ff8f 	bl	800400c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80030ee:	69fb      	ldr	r3, [r7, #28]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <vApplicationGetIdleTaskMemory+0x2c>)
 8003108:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <vApplicationGetIdleTaskMemory+0x30>)
 800310e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	2000012c 	.word	0x2000012c
 8003128:	200001d4 	.word	0x200001d4

0800312c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <vApplicationGetTimerTaskMemory+0x2c>)
 800313c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <vApplicationGetTimerTaskMemory+0x30>)
 8003142:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800314a:	601a      	str	r2, [r3, #0]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	200003d4 	.word	0x200003d4
 800315c:	2000047c 	.word	0x2000047c

08003160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f103 0208 	add.w	r2, r3, #8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f04f 32ff 	mov.w	r2, #4294967295
 8003178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f103 0208 	add.w	r2, r3, #8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f103 0208 	add.w	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d103      	bne.n	8003222 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e00c      	b.n	800323c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3308      	adds	r3, #8
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e002      	b.n	8003230 <vListInsert+0x2e>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	d2f6      	bcs.n	800322a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6892      	ldr	r2, [r2, #8]
 800328a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6852      	ldr	r2, [r2, #4]
 8003294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d103      	bne.n	80032a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032f2:	f002 fb97 	bl	8005a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	441a      	add	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	3b01      	subs	r3, #1
 8003324:	68f9      	ldr	r1, [r7, #12]
 8003326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	441a      	add	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	22ff      	movs	r2, #255	; 0xff
 8003336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	22ff      	movs	r2, #255	; 0xff
 800333e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d114      	bne.n	8003372 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01a      	beq.n	8003386 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3310      	adds	r3, #16
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fb3d 	bl	80049d4 <xTaskRemoveFromEventList>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <xQueueGenericReset+0xcc>)
 8003362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	e009      	b.n	8003386 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3310      	adds	r3, #16
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fef2 	bl	8003160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3324      	adds	r3, #36	; 0x24
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff feed 	bl	8003160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003386:	f002 fb7d 	bl	8005a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800338a:	2301      	movs	r3, #1
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08e      	sub	sp, #56	; 0x38
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <xQueueGenericCreateStatic+0x52>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <xQueueGenericCreateStatic+0x56>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <xQueueGenericCreateStatic+0x58>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	623b      	str	r3, [r7, #32]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <xQueueGenericCreateStatic+0x7e>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <xQueueGenericCreateStatic+0x82>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <xQueueGenericCreateStatic+0x84>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	61fb      	str	r3, [r7, #28]
}
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003436:	2350      	movs	r3, #80	; 0x50
 8003438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d00a      	beq.n	8003456 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	61bb      	str	r3, [r7, #24]
}
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003456:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800346a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f83f 	bl	80034fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003480:	4618      	mov	r0, r3
 8003482:	3730      	adds	r7, #48	; 0x30
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	613b      	str	r3, [r7, #16]
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	3350      	adds	r3, #80	; 0x50
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 fbd1 	bl	8005c68 <pvPortMalloc>
 80034c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d011      	beq.n	80034f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	3350      	adds	r3, #80	; 0x50
 80034d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034e0:	79fa      	ldrb	r2, [r7, #7]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f805 	bl	80034fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034f2:	69bb      	ldr	r3, [r7, #24]
	}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d103      	bne.n	8003518 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e002      	b.n	800351e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800352a:	2101      	movs	r1, #1
 800352c:	69b8      	ldr	r0, [r7, #24]
 800352e:	f7ff fecb 	bl	80032c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003562:	2300      	movs	r3, #0
 8003564:	2200      	movs	r2, #0
 8003566:	2100      	movs	r1, #0
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8a1 	bl	80036b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003580:	2301      	movs	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	461a      	mov	r2, r3
 800358c:	6939      	ldr	r1, [r7, #16]
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff7a 	bl	8003488 <xQueueGenericCreate>
 8003594:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff ffd3 	bl	8003542 <prvInitialiseMutex>

		return xNewQueue;
 800359c:	68fb      	ldr	r3, [r7, #12]
	}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b088      	sub	sp, #32
 80035aa:	af02      	add	r7, sp, #8
 80035ac:	4603      	mov	r3, r0
 80035ae:	6039      	str	r1, [r7, #0]
 80035b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80035b2:	2301      	movs	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2200      	movs	r2, #0
 80035c2:	6939      	ldr	r1, [r7, #16]
 80035c4:	6978      	ldr	r0, [r7, #20]
 80035c6:	f7ff fee7 	bl	8003398 <xQueueGenericCreateStatic>
 80035ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff ffb8 	bl	8003542 <prvInitialiseMutex>

		return xNewQueue;
 80035d2:	68fb      	ldr	r3, [r7, #12]
	}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	60fb      	str	r3, [r7, #12]
}
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	689c      	ldr	r4, [r3, #8]
 8003608:	f001 fba6 	bl	8004d58 <xTaskGetCurrentTaskHandle>
 800360c:	4603      	mov	r3, r0
 800360e:	429c      	cmp	r4, r3
 8003610:	d111      	bne.n	8003636 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003624:	2300      	movs	r3, #0
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	6938      	ldr	r0, [r7, #16]
 800362c:	f000 f840 	bl	80036b0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003630:	2301      	movs	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e001      	b.n	800363a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800363a:	697b      	ldr	r3, [r7, #20]
	}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd90      	pop	{r4, r7, pc}

08003644 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	60fb      	str	r3, [r7, #12]
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	689c      	ldr	r4, [r3, #8]
 8003672:	f001 fb71 	bl	8004d58 <xTaskGetCurrentTaskHandle>
 8003676:	4603      	mov	r3, r0
 8003678:	429c      	cmp	r4, r3
 800367a:	d107      	bne.n	800368c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003686:	2301      	movs	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e00c      	b.n	80036a6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800368c:	6839      	ldr	r1, [r7, #0]
 800368e:	6938      	ldr	r0, [r7, #16]
 8003690:	f000 fa88 	bl	8003ba4 <xQueueSemaphoreTake>
 8003694:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80036a6:	697b      	ldr	r3, [r7, #20]
	}
 80036a8:	4618      	mov	r0, r3
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}

080036b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08e      	sub	sp, #56	; 0x38
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036be:	2300      	movs	r3, #0
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <xQueueGenericSend+0x32>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036de:	bf00      	nop
 80036e0:	e7fe      	b.n	80036e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d103      	bne.n	80036f0 <xQueueGenericSend+0x40>
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <xQueueGenericSend+0x44>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <xQueueGenericSend+0x46>
 80036f4:	2300      	movs	r3, #0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <xQueueGenericSend+0x60>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d103      	bne.n	800371e <xQueueGenericSend+0x6e>
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <xQueueGenericSend+0x72>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericSend+0x74>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xQueueGenericSend+0x8e>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	623b      	str	r3, [r7, #32]
}
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800373e:	f001 fb1b 	bl	8004d78 <xTaskGetSchedulerState>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <xQueueGenericSend+0x9e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <xQueueGenericSend+0xa2>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <xQueueGenericSend+0xa4>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xQueueGenericSend+0xbe>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	61fb      	str	r3, [r7, #28]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800376e:	f002 f959 	bl	8005a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <xQueueGenericSend+0xd4>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d129      	bne.n	80037d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800378a:	f000 fb2f 	bl	8003dec <prvCopyDataToQueue>
 800378e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	3324      	adds	r3, #36	; 0x24
 800379c:	4618      	mov	r0, r3
 800379e:	f001 f919 	bl	80049d4 <xTaskRemoveFromEventList>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037a8:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <xQueueGenericSend+0x1f8>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	e00a      	b.n	80037d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037c0:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <xQueueGenericSend+0x1f8>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037d0:	f002 f958 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e063      	b.n	80038a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037de:	f002 f951 	bl	8005a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e05c      	b.n	80038a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 f953 	bl	8004a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037fa:	f002 f943 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037fe:	f000 febf 	bl	8004580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003802:	f002 f90f 	bl	8005a24 <vPortEnterCritical>
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800380c:	b25b      	sxtb	r3, r3
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d103      	bne.n	800381c <xQueueGenericSend+0x16c>
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003822:	b25b      	sxtb	r3, r3
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d103      	bne.n	8003832 <xQueueGenericSend+0x182>
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003832:	f002 f927 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003836:	1d3a      	adds	r2, r7, #4
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f001 f942 	bl	8004ac8 <xTaskCheckForTimeOut>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d124      	bne.n	8003894 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800384a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800384c:	f000 fbc6 	bl	8003fdc <prvIsQueueFull>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	3310      	adds	r3, #16
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f868 	bl	8004934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003866:	f000 fb51 	bl	8003f0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800386a:	f000 fe97 	bl	800459c <xTaskResumeAll>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f af7c 	bne.w	800376e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <xQueueGenericSend+0x1f8>)
 8003878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	e772      	b.n	800376e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388a:	f000 fb3f 	bl	8003f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800388e:	f000 fe85 	bl	800459c <xTaskResumeAll>
 8003892:	e76c      	b.n	800376e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003896:	f000 fb39 	bl	8003f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800389a:	f000 fe7f 	bl	800459c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800389e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3738      	adds	r7, #56	; 0x38
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b090      	sub	sp, #64	; 0x40
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <xQueueGenericSendFromISR+0x3c>
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <xQueueGenericSendFromISR+0x40>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <xQueueGenericSendFromISR+0x42>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d103      	bne.n	8003916 <xQueueGenericSendFromISR+0x6a>
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <xQueueGenericSendFromISR+0x6e>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <xQueueGenericSendFromISR+0x70>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	623b      	str	r3, [r7, #32]
}
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003936:	f002 f957 	bl	8005be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800393a:	f3ef 8211 	mrs	r2, BASEPRI
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	61fa      	str	r2, [r7, #28]
 8003950:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003952:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <xQueueGenericSendFromISR+0xbc>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d12f      	bne.n	80039c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800396e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800397e:	f000 fa35 	bl	8003dec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003982:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d112      	bne.n	80039b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2b00      	cmp	r3, #0
 8003992:	d016      	beq.n	80039c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	3324      	adds	r3, #36	; 0x24
 8003998:	4618      	mov	r0, r3
 800399a:	f001 f81b 	bl	80049d4 <xTaskRemoveFromEventList>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00e      	beq.n	80039c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e007      	b.n	80039c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039b6:	3301      	adds	r3, #1
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	b25a      	sxtb	r2, r3
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039c2:	2301      	movs	r3, #1
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80039c6:	e001      	b.n	80039cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3740      	adds	r7, #64	; 0x40
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <xQueueReceive+0x30>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	623b      	str	r3, [r7, #32]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <xQueueReceive+0x3e>
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <xQueueReceive+0x42>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueReceive+0x44>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xQueueReceive+0x5e>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	61fb      	str	r3, [r7, #28]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a42:	f001 f999 	bl	8004d78 <xTaskGetSchedulerState>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <xQueueReceive+0x6e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <xQueueReceive+0x72>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <xQueueReceive+0x74>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <xQueueReceive+0x8e>
	__asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	61bb      	str	r3, [r7, #24]
}
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a72:	f001 ffd7 	bl	8005a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01f      	beq.n	8003ac2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a86:	f000 fa1b 	bl	8003ec0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00f      	beq.n	8003aba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	3310      	adds	r3, #16
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 ff98 	bl	80049d4 <xTaskRemoveFromEventList>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aaa:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <xQueueReceive+0x1bc>)
 8003aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003aba:	f001 ffe3 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e069      	b.n	8003b96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ac8:	f001 ffdc 	bl	8005a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e062      	b.n	8003b96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ad6:	f107 0310 	add.w	r3, r7, #16
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 ffde 	bl	8004a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ae4:	f001 ffce 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ae8:	f000 fd4a 	bl	8004580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aec:	f001 ff9a 	bl	8005a24 <vPortEnterCritical>
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003af6:	b25b      	sxtb	r3, r3
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d103      	bne.n	8003b06 <xQueueReceive+0x122>
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d103      	bne.n	8003b1c <xQueueReceive+0x138>
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b1c:	f001 ffb2 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b20:	1d3a      	adds	r2, r7, #4
 8003b22:	f107 0310 	add.w	r3, r7, #16
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 ffcd 	bl	8004ac8 <xTaskCheckForTimeOut>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d123      	bne.n	8003b7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b36:	f000 fa3b 	bl	8003fb0 <prvIsQueueEmpty>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d017      	beq.n	8003b70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	3324      	adds	r3, #36	; 0x24
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fef3 	bl	8004934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b50:	f000 f9dc 	bl	8003f0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b54:	f000 fd22 	bl	800459c <xTaskResumeAll>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d189      	bne.n	8003a72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <xQueueReceive+0x1bc>)
 8003b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	e780      	b.n	8003a72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b72:	f000 f9cb 	bl	8003f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b76:	f000 fd11 	bl	800459c <xTaskResumeAll>
 8003b7a:	e77a      	b.n	8003a72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7e:	f000 f9c5 	bl	8003f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b82:	f000 fd0b 	bl	800459c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b88:	f000 fa12 	bl	8003fb0 <prvIsQueueEmpty>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f43f af6f 	beq.w	8003a72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3730      	adds	r7, #48	; 0x30
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000ed04 	.word	0xe000ed04

08003ba4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08e      	sub	sp, #56	; 0x38
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	623b      	str	r3, [r7, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61fb      	str	r3, [r7, #28]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bf4:	f001 f8c0 	bl	8004d78 <xTaskGetSchedulerState>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <xQueueSemaphoreTake+0x60>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <xQueueSemaphoreTake+0x64>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <xQueueSemaphoreTake+0x66>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	61bb      	str	r3, [r7, #24]
}
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c24:	f001 fefe 	bl	8005a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d024      	beq.n	8003c7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c44:	f001 fa0e 	bl	8005064 <pvTaskIncrementMutexHeldCount>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	3310      	adds	r3, #16
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 feba 	bl	80049d4 <xTaskRemoveFromEventList>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <xQueueSemaphoreTake+0x214>)
 8003c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c76:	f001 ff05 	bl	8005a84 <vPortExitCritical>
				return pdPASS;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e097      	b.n	8003dae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	617b      	str	r3, [r7, #20]
}
 8003c9c:	bf00      	nop
 8003c9e:	e7fe      	b.n	8003c9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ca0:	f001 fef0 	bl	8005a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e082      	b.n	8003dae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cae:	f107 030c 	add.w	r3, r7, #12
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fef2 	bl	8004a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cbc:	f001 fee2 	bl	8005a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cc0:	f000 fc5e 	bl	8004580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cc4:	f001 feae 	bl	8005a24 <vPortEnterCritical>
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cce:	b25b      	sxtb	r3, r3
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d103      	bne.n	8003cde <xQueueSemaphoreTake+0x13a>
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce4:	b25b      	sxtb	r3, r3
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d103      	bne.n	8003cf4 <xQueueSemaphoreTake+0x150>
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf4:	f001 fec6 	bl	8005a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cf8:	463a      	mov	r2, r7
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fee1 	bl	8004ac8 <xTaskCheckForTimeOut>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d132      	bne.n	8003d72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d0e:	f000 f94f 	bl	8003fb0 <prvIsQueueEmpty>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d026      	beq.n	8003d66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003d20:	f001 fe80 	bl	8005a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 f843 	bl	8004db4 <xTaskPriorityInherit>
 8003d2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003d30:	f001 fea8 	bl	8005a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	3324      	adds	r3, #36	; 0x24
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fdf9 	bl	8004934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d44:	f000 f8e2 	bl	8003f0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d48:	f000 fc28 	bl	800459c <xTaskResumeAll>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f47f af68 	bne.w	8003c24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <xQueueSemaphoreTake+0x214>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	e75e      	b.n	8003c24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d68:	f000 f8d0 	bl	8003f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d6c:	f000 fc16 	bl	800459c <xTaskResumeAll>
 8003d70:	e758      	b.n	8003c24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d74:	f000 f8ca 	bl	8003f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d78:	f000 fc10 	bl	800459c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d7e:	f000 f917 	bl	8003fb0 <prvIsQueueEmpty>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f43f af4d 	beq.w	8003c24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003d90:	f001 fe48 	bl	8005a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d96:	f000 f811 	bl	8003dbc <prvGetDisinheritPriorityAfterTimeout>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 f8dc 	bl	8004f60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003da8:	f001 fe6c 	bl	8005a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3738      	adds	r7, #56	; 0x38
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e001      	b.n	8003dde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003dde:	68fb      	ldr	r3, [r7, #12]
	}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10d      	bne.n	8003e26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d14d      	bne.n	8003eae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 f834 	bl	8004e84 <xTaskPriorityDisinherit>
 8003e1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	e043      	b.n	8003eae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d119      	bne.n	8003e60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6858      	ldr	r0, [r3, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	461a      	mov	r2, r3
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	f002 f984 	bl	8006144 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	441a      	add	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d32b      	bcc.n	8003eae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	e026      	b.n	8003eae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68d8      	ldr	r0, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	f002 f96a 	bl	8006144 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	425b      	negs	r3, r3
 8003e7a:	441a      	add	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d207      	bcs.n	8003e9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	425b      	negs	r3, r3
 8003e96:	441a      	add	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d105      	bne.n	8003eae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003eb6:	697b      	ldr	r3, [r7, #20]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d303      	bcc.n	8003ef4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68d9      	ldr	r1, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	461a      	mov	r2, r3
 8003efe:	6838      	ldr	r0, [r7, #0]
 8003f00:	f002 f920 	bl	8006144 <memcpy>
	}
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f14:	f001 fd86 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f20:	e011      	b.n	8003f46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d012      	beq.n	8003f50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3324      	adds	r3, #36	; 0x24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fd50 	bl	80049d4 <xTaskRemoveFromEventList>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f3a:	f000 fe27 	bl	8004b8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	dce9      	bgt.n	8003f22 <prvUnlockQueue+0x16>
 8003f4e:	e000      	b.n	8003f52 <prvUnlockQueue+0x46>
					break;
 8003f50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	22ff      	movs	r2, #255	; 0xff
 8003f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f5a:	f001 fd93 	bl	8005a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f5e:	f001 fd61 	bl	8005a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f6a:	e011      	b.n	8003f90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d012      	beq.n	8003f9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3310      	adds	r3, #16
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fd2b 	bl	80049d4 <xTaskRemoveFromEventList>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f84:	f000 fe02 	bl	8004b8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f88:	7bbb      	ldrb	r3, [r7, #14]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dce9      	bgt.n	8003f6c <prvUnlockQueue+0x60>
 8003f98:	e000      	b.n	8003f9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	22ff      	movs	r2, #255	; 0xff
 8003fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fa4:	f001 fd6e 	bl	8005a84 <vPortExitCritical>
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fb8:	f001 fd34 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e001      	b.n	8003fce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fce:	f001 fd59 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fe4:	f001 fd1e 	bl	8005a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d102      	bne.n	8003ffa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	e001      	b.n	8003ffe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ffe:	f001 fd41 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	e014      	b.n	8004046 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800401c:	4a0f      	ldr	r2, [pc, #60]	; (800405c <vQueueAddToRegistry+0x50>)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004028:	490c      	ldr	r1, [pc, #48]	; (800405c <vQueueAddToRegistry+0x50>)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004032:	4a0a      	ldr	r2, [pc, #40]	; (800405c <vQueueAddToRegistry+0x50>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800403e:	e006      	b.n	800404e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b07      	cmp	r3, #7
 800404a:	d9e7      	bls.n	800401c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	2000087c 	.word	0x2000087c

08004060 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004070:	f001 fcd8 	bl	8005a24 <vPortEnterCritical>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800407a:	b25b      	sxtb	r3, r3
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d103      	bne.n	800408a <vQueueWaitForMessageRestricted+0x2a>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004090:	b25b      	sxtb	r3, r3
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d103      	bne.n	80040a0 <vQueueWaitForMessageRestricted+0x40>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a0:	f001 fcf0 	bl	8005a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3324      	adds	r3, #36	; 0x24
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fc61 	bl	800497c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040ba:	6978      	ldr	r0, [r7, #20]
 80040bc:	f7ff ff26 	bl	8003f0c <prvUnlockQueue>
	}
 80040c0:	bf00      	nop
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08e      	sub	sp, #56	; 0x38
 80040cc:	af04      	add	r7, sp, #16
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	623b      	str	r3, [r7, #32]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <xTaskCreateStatic+0x46>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	61fb      	str	r3, [r7, #28]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800410e:	23a8      	movs	r3, #168	; 0xa8
 8004110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2ba8      	cmp	r3, #168	; 0xa8
 8004116:	d00a      	beq.n	800412e <xTaskCreateStatic+0x66>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	61bb      	str	r3, [r7, #24]
}
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800412e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01e      	beq.n	8004174 <xTaskCreateStatic+0xac>
 8004136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004144:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2202      	movs	r2, #2
 800414a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800414e:	2300      	movs	r3, #0
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	9302      	str	r3, [sp, #8]
 8004156:	f107 0314 	add.w	r3, r7, #20
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f850 	bl	800420c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800416c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416e:	f000 f8f3 	bl	8004358 <prvAddNewTaskToReadyList>
 8004172:	e001      	b.n	8004178 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004178:	697b      	ldr	r3, [r7, #20]
	}
 800417a:	4618      	mov	r0, r3
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004182:	b580      	push	{r7, lr}
 8004184:	b08c      	sub	sp, #48	; 0x30
 8004186:	af04      	add	r7, sp, #16
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f001 fd66 	bl	8005c68 <pvPortMalloc>
 800419c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041a4:	20a8      	movs	r0, #168	; 0xa8
 80041a6:	f001 fd5f 	bl	8005c68 <pvPortMalloc>
 80041aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
 80041b8:	e005      	b.n	80041c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f001 fe20 	bl	8005e00 <vPortFree>
 80041c0:	e001      	b.n	80041c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	2300      	movs	r3, #0
 80041d8:	9303      	str	r3, [sp, #12]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	9302      	str	r3, [sp, #8]
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f80e 	bl	800420c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f0:	69f8      	ldr	r0, [r7, #28]
 80041f2:	f000 f8b1 	bl	8004358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e002      	b.n	8004202 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004200:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004202:	69bb      	ldr	r3, [r7, #24]
	}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	461a      	mov	r2, r3
 8004224:	21a5      	movs	r1, #165	; 0xa5
 8004226:	f001 ff09 	bl	800603c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004234:	3b01      	subs	r3, #1
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f023 0307 	bic.w	r3, r3, #7
 8004242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <prvInitialiseNewTask+0x58>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	617b      	str	r3, [r7, #20]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01f      	beq.n	80042aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e012      	b.n	8004296 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	7819      	ldrb	r1, [r3, #0]
 8004278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	3334      	adds	r3, #52	; 0x34
 8004280:	460a      	mov	r2, r1
 8004282:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2b0f      	cmp	r3, #15
 800429a:	d9e9      	bls.n	8004270 <prvInitialiseNewTask+0x64>
 800429c:	e000      	b.n	80042a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800429e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042a8:	e003      	b.n	80042b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	2b37      	cmp	r3, #55	; 0x37
 80042b6:	d901      	bls.n	80042bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042b8:	2337      	movs	r3, #55	; 0x37
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	2200      	movs	r2, #0
 80042cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	3304      	adds	r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe ff64 	bl	80031a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	3318      	adds	r3, #24
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe ff5f 	bl	80031a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	2200      	movs	r2, #0
 8004304:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	3354      	adds	r3, #84	; 0x54
 800430c:	224c      	movs	r2, #76	; 0x4c
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f001 fe93 	bl	800603c <memset>
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	4a0c      	ldr	r2, [pc, #48]	; (800434c <prvInitialiseNewTask+0x140>)
 800431a:	659a      	str	r2, [r3, #88]	; 0x58
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	4a0c      	ldr	r2, [pc, #48]	; (8004350 <prvInitialiseNewTask+0x144>)
 8004320:	65da      	str	r2, [r3, #92]	; 0x5c
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <prvInitialiseNewTask+0x148>)
 8004326:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	69b8      	ldr	r0, [r7, #24]
 800432e:	f001 fa4f 	bl	80057d0 <pxPortInitialiseStack>
 8004332:	4602      	mov	r2, r0
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004344:	bf00      	nop
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20004b10 	.word	0x20004b10
 8004350:	20004b78 	.word	0x20004b78
 8004354:	20004be0 	.word	0x20004be0

08004358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004360:	f001 fb60 	bl	8005a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <prvAddNewTaskToReadyList+0xc4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	4a2c      	ldr	r2, [pc, #176]	; (800441c <prvAddNewTaskToReadyList+0xc4>)
 800436c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800436e:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <prvAddNewTaskToReadyList+0xc8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004376:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <prvAddNewTaskToReadyList+0xc8>)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800437c:	4b27      	ldr	r3, [pc, #156]	; (800441c <prvAddNewTaskToReadyList+0xc4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d110      	bne.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004384:	f000 fc26 	bl	8004bd4 <prvInitialiseTaskLists>
 8004388:	e00d      	b.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <prvAddNewTaskToReadyList+0xcc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004392:	4b23      	ldr	r3, [pc, #140]	; (8004420 <prvAddNewTaskToReadyList+0xc8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	429a      	cmp	r2, r3
 800439e:	d802      	bhi.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <prvAddNewTaskToReadyList+0xc8>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <prvAddNewTaskToReadyList+0xd0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <prvAddNewTaskToReadyList+0xd0>)
 80043ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <prvAddNewTaskToReadyList+0xd0>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <prvAddNewTaskToReadyList+0xd4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d903      	bls.n	80043cc <prvAddNewTaskToReadyList+0x74>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	4a18      	ldr	r2, [pc, #96]	; (800442c <prvAddNewTaskToReadyList+0xd4>)
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4a15      	ldr	r2, [pc, #84]	; (8004430 <prvAddNewTaskToReadyList+0xd8>)
 80043da:	441a      	add	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f7fe fee9 	bl	80031ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043e8:	f001 fb4c 	bl	8005a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <prvAddNewTaskToReadyList+0xcc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00e      	beq.n	8004412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <prvAddNewTaskToReadyList+0xc8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	429a      	cmp	r2, r3
 8004400:	d207      	bcs.n	8004412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <prvAddNewTaskToReadyList+0xdc>)
 8004404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000d90 	.word	0x20000d90
 8004420:	200008bc 	.word	0x200008bc
 8004424:	20000d9c 	.word	0x20000d9c
 8004428:	20000dac 	.word	0x20000dac
 800442c:	20000d98 	.word	0x20000d98
 8004430:	200008c0 	.word	0x200008c0
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <vTaskDelay+0x60>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <vTaskDelay+0x30>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60bb      	str	r3, [r7, #8]
}
 8004464:	bf00      	nop
 8004466:	e7fe      	b.n	8004466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004468:	f000 f88a 	bl	8004580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800446c:	2100      	movs	r1, #0
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fe0c 	bl	800508c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004474:	f000 f892 	bl	800459c <xTaskResumeAll>
 8004478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <vTaskDelay+0x64>)
 8004482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000db8 	.word	0x20000db8
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ae:	463a      	mov	r2, r7
 80044b0:	1d39      	adds	r1, r7, #4
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fe1e 	bl	80030f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	9202      	str	r2, [sp, #8]
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	2300      	movs	r3, #0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2300      	movs	r3, #0
 80044cc:	460a      	mov	r2, r1
 80044ce:	4924      	ldr	r1, [pc, #144]	; (8004560 <vTaskStartScheduler+0xc0>)
 80044d0:	4824      	ldr	r0, [pc, #144]	; (8004564 <vTaskStartScheduler+0xc4>)
 80044d2:	f7ff fdf9 	bl	80040c8 <xTaskCreateStatic>
 80044d6:	4603      	mov	r3, r0
 80044d8:	4a23      	ldr	r2, [pc, #140]	; (8004568 <vTaskStartScheduler+0xc8>)
 80044da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044dc:	4b22      	ldr	r3, [pc, #136]	; (8004568 <vTaskStartScheduler+0xc8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044e4:	2301      	movs	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e001      	b.n	80044ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d102      	bne.n	80044fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044f4:	f000 fe1e 	bl	8005134 <xTimerCreateTimerTask>
 80044f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d11b      	bne.n	8004538 <vTaskStartScheduler+0x98>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	613b      	str	r3, [r7, #16]
}
 8004512:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004514:	4b15      	ldr	r3, [pc, #84]	; (800456c <vTaskStartScheduler+0xcc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3354      	adds	r3, #84	; 0x54
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <vTaskStartScheduler+0xd0>)
 800451c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <vTaskStartScheduler+0xd4>)
 8004520:	f04f 32ff 	mov.w	r2, #4294967295
 8004524:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <vTaskStartScheduler+0xd8>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800452c:	4b13      	ldr	r3, [pc, #76]	; (800457c <vTaskStartScheduler+0xdc>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004532:	f001 f9d5 	bl	80058e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004536:	e00e      	b.n	8004556 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d10a      	bne.n	8004556 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <vTaskStartScheduler+0xb4>
}
 8004556:	bf00      	nop
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	08006294 	.word	0x08006294
 8004564:	08004ba5 	.word	0x08004ba5
 8004568:	20000db4 	.word	0x20000db4
 800456c:	200008bc 	.word	0x200008bc
 8004570:	2000005c 	.word	0x2000005c
 8004574:	20000db0 	.word	0x20000db0
 8004578:	20000d9c 	.word	0x20000d9c
 800457c:	20000d94 	.word	0x20000d94

08004580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004584:	4b04      	ldr	r3, [pc, #16]	; (8004598 <vTaskSuspendAll+0x18>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	4a03      	ldr	r2, [pc, #12]	; (8004598 <vTaskSuspendAll+0x18>)
 800458c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800458e:	bf00      	nop
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000db8 	.word	0x20000db8

0800459c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045aa:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <xTaskResumeAll+0x118>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	603b      	str	r3, [r7, #0]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045c8:	f001 fa2c 	bl	8005a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045cc:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <xTaskResumeAll+0x118>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	4a38      	ldr	r2, [pc, #224]	; (80046b4 <xTaskResumeAll+0x118>)
 80045d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045d6:	4b37      	ldr	r3, [pc, #220]	; (80046b4 <xTaskResumeAll+0x118>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d162      	bne.n	80046a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <xTaskResumeAll+0x11c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d05e      	beq.n	80046a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e6:	e02f      	b.n	8004648 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e8:	4b34      	ldr	r3, [pc, #208]	; (80046bc <xTaskResumeAll+0x120>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3318      	adds	r3, #24
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe fe3d 	bl	8003274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fe38 	bl	8003274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <xTaskResumeAll+0x124>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d903      	bls.n	8004618 <xTaskResumeAll+0x7c>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <xTaskResumeAll+0x124>)
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4a27      	ldr	r2, [pc, #156]	; (80046c4 <xTaskResumeAll+0x128>)
 8004626:	441a      	add	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f7fe fdc3 	bl	80031ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <xTaskResumeAll+0x12c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <xTaskResumeAll+0x130>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004648:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <xTaskResumeAll+0x120>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1cb      	bne.n	80045e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004656:	f000 fb5f 	bl	8004d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <xTaskResumeAll+0x134>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d010      	beq.n	8004688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004666:	f000 f847 	bl	80046f8 <xTaskIncrementTick>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004670:	4b16      	ldr	r3, [pc, #88]	; (80046cc <xTaskResumeAll+0x130>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3b01      	subs	r3, #1
 800467a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f1      	bne.n	8004666 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004682:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <xTaskResumeAll+0x134>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <xTaskResumeAll+0x130>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004690:	2301      	movs	r3, #1
 8004692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004694:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <xTaskResumeAll+0x138>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046a4:	f001 f9ee 	bl	8005a84 <vPortExitCritical>

	return xAlreadyYielded;
 80046a8:	68bb      	ldr	r3, [r7, #8]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000db8 	.word	0x20000db8
 80046b8:	20000d90 	.word	0x20000d90
 80046bc:	20000d50 	.word	0x20000d50
 80046c0:	20000d98 	.word	0x20000d98
 80046c4:	200008c0 	.word	0x200008c0
 80046c8:	200008bc 	.word	0x200008bc
 80046cc:	20000da4 	.word	0x20000da4
 80046d0:	20000da0 	.word	0x20000da0
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <xTaskGetTickCount+0x1c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046e4:	687b      	ldr	r3, [r7, #4]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000d94 	.word	0x20000d94

080046f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004702:	4b4f      	ldr	r3, [pc, #316]	; (8004840 <xTaskIncrementTick+0x148>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 808f 	bne.w	800482a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800470c:	4b4d      	ldr	r3, [pc, #308]	; (8004844 <xTaskIncrementTick+0x14c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3301      	adds	r3, #1
 8004712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004714:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <xTaskIncrementTick+0x14c>)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d120      	bne.n	8004762 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004720:	4b49      	ldr	r3, [pc, #292]	; (8004848 <xTaskIncrementTick+0x150>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <xTaskIncrementTick+0x48>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	603b      	str	r3, [r7, #0]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <xTaskIncrementTick+0x46>
 8004740:	4b41      	ldr	r3, [pc, #260]	; (8004848 <xTaskIncrementTick+0x150>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	4b41      	ldr	r3, [pc, #260]	; (800484c <xTaskIncrementTick+0x154>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a3f      	ldr	r2, [pc, #252]	; (8004848 <xTaskIncrementTick+0x150>)
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4a3f      	ldr	r2, [pc, #252]	; (800484c <xTaskIncrementTick+0x154>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <xTaskIncrementTick+0x158>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <xTaskIncrementTick+0x158>)
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	f000 fadb 	bl	8004d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <xTaskIncrementTick+0x15c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	429a      	cmp	r2, r3
 800476a:	d349      	bcc.n	8004800 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800476c:	4b36      	ldr	r3, [pc, #216]	; (8004848 <xTaskIncrementTick+0x150>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004776:	4b37      	ldr	r3, [pc, #220]	; (8004854 <xTaskIncrementTick+0x15c>)
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	601a      	str	r2, [r3, #0]
					break;
 800477e:	e03f      	b.n	8004800 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004780:	4b31      	ldr	r3, [pc, #196]	; (8004848 <xTaskIncrementTick+0x150>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d203      	bcs.n	80047a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004798:	4a2e      	ldr	r2, [pc, #184]	; (8004854 <xTaskIncrementTick+0x15c>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800479e:	e02f      	b.n	8004800 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fd65 	bl	8003274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	3318      	adds	r3, #24
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fd5c 	bl	8003274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4b25      	ldr	r3, [pc, #148]	; (8004858 <xTaskIncrementTick+0x160>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d903      	bls.n	80047d0 <xTaskIncrementTick+0xd8>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	4a22      	ldr	r2, [pc, #136]	; (8004858 <xTaskIncrementTick+0x160>)
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4a1f      	ldr	r2, [pc, #124]	; (800485c <xTaskIncrementTick+0x164>)
 80047de:	441a      	add	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7fe fce7 	bl	80031ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <xTaskIncrementTick+0x168>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d3b8      	bcc.n	800476c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047fe:	e7b5      	b.n	800476c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <xTaskIncrementTick+0x168>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	4915      	ldr	r1, [pc, #84]	; (800485c <xTaskIncrementTick+0x164>)
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d901      	bls.n	800481c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004818:	2301      	movs	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <xTaskIncrementTick+0x16c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e004      	b.n	8004834 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800482a:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <xTaskIncrementTick+0x170>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <xTaskIncrementTick+0x170>)
 8004832:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004834:	697b      	ldr	r3, [r7, #20]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000db8 	.word	0x20000db8
 8004844:	20000d94 	.word	0x20000d94
 8004848:	20000d48 	.word	0x20000d48
 800484c:	20000d4c 	.word	0x20000d4c
 8004850:	20000da8 	.word	0x20000da8
 8004854:	20000db0 	.word	0x20000db0
 8004858:	20000d98 	.word	0x20000d98
 800485c:	200008c0 	.word	0x200008c0
 8004860:	200008bc 	.word	0x200008bc
 8004864:	20000da4 	.word	0x20000da4
 8004868:	20000da0 	.word	0x20000da0

0800486c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004872:	4b2a      	ldr	r3, [pc, #168]	; (800491c <vTaskSwitchContext+0xb0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800487a:	4b29      	ldr	r3, [pc, #164]	; (8004920 <vTaskSwitchContext+0xb4>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004880:	e046      	b.n	8004910 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <vTaskSwitchContext+0xb4>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004888:	4b26      	ldr	r3, [pc, #152]	; (8004924 <vTaskSwitchContext+0xb8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e010      	b.n	80048b2 <vTaskSwitchContext+0x46>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <vTaskSwitchContext+0x40>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	607b      	str	r3, [r7, #4]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <vTaskSwitchContext+0x3e>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	491d      	ldr	r1, [pc, #116]	; (8004928 <vTaskSwitchContext+0xbc>)
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0e4      	beq.n	8004890 <vTaskSwitchContext+0x24>
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4a15      	ldr	r2, [pc, #84]	; (8004928 <vTaskSwitchContext+0xbc>)
 80048d2:	4413      	add	r3, r2
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	3308      	adds	r3, #8
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d104      	bne.n	80048f6 <vTaskSwitchContext+0x8a>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a0b      	ldr	r2, [pc, #44]	; (800492c <vTaskSwitchContext+0xc0>)
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4a08      	ldr	r2, [pc, #32]	; (8004924 <vTaskSwitchContext+0xb8>)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <vTaskSwitchContext+0xc0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3354      	adds	r3, #84	; 0x54
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <vTaskSwitchContext+0xc4>)
 800490e:	6013      	str	r3, [r2, #0]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	20000db8 	.word	0x20000db8
 8004920:	20000da4 	.word	0x20000da4
 8004924:	20000d98 	.word	0x20000d98
 8004928:	200008c0 	.word	0x200008c0
 800492c:	200008bc 	.word	0x200008bc
 8004930:	2000005c 	.word	0x2000005c

08004934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60fb      	str	r3, [r7, #12]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <vTaskPlaceOnEventList+0x44>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3318      	adds	r3, #24
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fe fc4d 	bl	8003202 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004968:	2101      	movs	r1, #1
 800496a:	6838      	ldr	r0, [r7, #0]
 800496c:	f000 fb8e 	bl	800508c <prvAddCurrentTaskToDelayedList>
}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	200008bc 	.word	0x200008bc

0800497c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	617b      	str	r3, [r7, #20]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3318      	adds	r3, #24
 80049aa:	4619      	mov	r1, r3
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7fe fc04 	bl	80031ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295
 80049bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f000 fb63 	bl	800508c <prvAddCurrentTaskToDelayedList>
	}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	200008bc 	.word	0x200008bc

080049d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60fb      	str	r3, [r7, #12]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	3318      	adds	r3, #24
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fc35 	bl	8003274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <xTaskRemoveFromEventList+0xb0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11d      	bne.n	8004a4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fc2c 	bl	8003274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <xTaskRemoveFromEventList+0xb4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d903      	bls.n	8004a30 <xTaskRemoveFromEventList+0x5c>
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <xTaskRemoveFromEventList+0xb4>)
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <xTaskRemoveFromEventList+0xb8>)
 8004a3e:	441a      	add	r2, r3
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f7fe fbb7 	bl	80031ba <vListInsertEnd>
 8004a4c:	e005      	b.n	8004a5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3318      	adds	r3, #24
 8004a52:	4619      	mov	r1, r3
 8004a54:	480e      	ldr	r0, [pc, #56]	; (8004a90 <xTaskRemoveFromEventList+0xbc>)
 8004a56:	f7fe fbb0 	bl	80031ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <xTaskRemoveFromEventList+0xc0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d905      	bls.n	8004a74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <xTaskRemoveFromEventList+0xc4>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e001      	b.n	8004a78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a78:	697b      	ldr	r3, [r7, #20]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000db8 	.word	0x20000db8
 8004a88:	20000d98 	.word	0x20000d98
 8004a8c:	200008c0 	.word	0x200008c0
 8004a90:	20000d50 	.word	0x20000d50
 8004a94:	200008bc 	.word	0x200008bc
 8004a98:	20000da4 	.word	0x20000da4

08004a9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <vTaskInternalSetTimeOutState+0x24>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <vTaskInternalSetTimeOutState+0x28>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	605a      	str	r2, [r3, #4]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	20000da8 	.word	0x20000da8
 8004ac4:	20000d94 	.word	0x20000d94

08004ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	613b      	str	r3, [r7, #16]
}
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b0a:	f000 ff8b 	bl	8005a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <xTaskCheckForTimeOut+0xbc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d102      	bne.n	8004b2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	e023      	b.n	8004b76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <xTaskCheckForTimeOut+0xc0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d007      	beq.n	8004b4a <xTaskCheckForTimeOut+0x82>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	e015      	b.n	8004b76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d20b      	bcs.n	8004b6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1ad2      	subs	r2, r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ff9b 	bl	8004a9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	e004      	b.n	8004b76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b76:	f000 ff85 	bl	8005a84 <vPortExitCritical>

	return xReturn;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000d94 	.word	0x20000d94
 8004b88:	20000da8 	.word	0x20000da8

08004b8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <vTaskMissedYield+0x14>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
}
 8004b96:	bf00      	nop
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000da4 	.word	0x20000da4

08004ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bac:	f000 f852 	bl	8004c54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <prvIdleTask+0x28>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d9f9      	bls.n	8004bac <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <prvIdleTask+0x2c>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bc8:	e7f0      	b.n	8004bac <prvIdleTask+0x8>
 8004bca:	bf00      	nop
 8004bcc:	200008c0 	.word	0x200008c0
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	e00c      	b.n	8004bfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <prvInitialiseTaskLists+0x60>)
 8004bec:	4413      	add	r3, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fab6 	bl	8003160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b37      	cmp	r3, #55	; 0x37
 8004bfe:	d9ef      	bls.n	8004be0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c00:	480d      	ldr	r0, [pc, #52]	; (8004c38 <prvInitialiseTaskLists+0x64>)
 8004c02:	f7fe faad 	bl	8003160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c06:	480d      	ldr	r0, [pc, #52]	; (8004c3c <prvInitialiseTaskLists+0x68>)
 8004c08:	f7fe faaa 	bl	8003160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c0c:	480c      	ldr	r0, [pc, #48]	; (8004c40 <prvInitialiseTaskLists+0x6c>)
 8004c0e:	f7fe faa7 	bl	8003160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c12:	480c      	ldr	r0, [pc, #48]	; (8004c44 <prvInitialiseTaskLists+0x70>)
 8004c14:	f7fe faa4 	bl	8003160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c18:	480b      	ldr	r0, [pc, #44]	; (8004c48 <prvInitialiseTaskLists+0x74>)
 8004c1a:	f7fe faa1 	bl	8003160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <prvInitialiseTaskLists+0x78>)
 8004c20:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <prvInitialiseTaskLists+0x64>)
 8004c22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <prvInitialiseTaskLists+0x7c>)
 8004c26:	4a05      	ldr	r2, [pc, #20]	; (8004c3c <prvInitialiseTaskLists+0x68>)
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200008c0 	.word	0x200008c0
 8004c38:	20000d20 	.word	0x20000d20
 8004c3c:	20000d34 	.word	0x20000d34
 8004c40:	20000d50 	.word	0x20000d50
 8004c44:	20000d64 	.word	0x20000d64
 8004c48:	20000d7c 	.word	0x20000d7c
 8004c4c:	20000d48 	.word	0x20000d48
 8004c50:	20000d4c 	.word	0x20000d4c

08004c54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c5a:	e019      	b.n	8004c90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c5c:	f000 fee2 	bl	8005a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c60:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <prvCheckTasksWaitingTermination+0x50>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fb01 	bl	8003274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <prvCheckTasksWaitingTermination+0x54>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <prvCheckTasksWaitingTermination+0x54>)
 8004c7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c86:	f000 fefd 	bl	8005a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f810 	bl	8004cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e1      	bne.n	8004c5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000d64 	.word	0x20000d64
 8004ca8:	20000d90 	.word	0x20000d90
 8004cac:	20000d78 	.word	0x20000d78

08004cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3354      	adds	r3, #84	; 0x54
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 f9c5 	bl	800604c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 f895 	bl	8005e00 <vPortFree>
				vPortFree( pxTCB );
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f001 f892 	bl	8005e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cdc:	e018      	b.n	8004d10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d103      	bne.n	8004cf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f001 f889 	bl	8005e00 <vPortFree>
	}
 8004cee:	e00f      	b.n	8004d10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d00a      	beq.n	8004d10 <prvDeleteTCB+0x60>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60fb      	str	r3, [r7, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <prvDeleteTCB+0x5e>
	}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <prvResetNextTaskUnblockTime+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <prvResetNextTaskUnblockTime+0x3c>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d30:	e008      	b.n	8004d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <prvResetNextTaskUnblockTime+0x38>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <prvResetNextTaskUnblockTime+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000d48 	.word	0x20000d48
 8004d54:	20000db0 	.word	0x20000db0

08004d58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <xTaskGetCurrentTaskHandle+0x1c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004d64:	687b      	ldr	r3, [r7, #4]
	}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	200008bc 	.word	0x200008bc

08004d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <xTaskGetSchedulerState+0x34>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d86:	2301      	movs	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	e008      	b.n	8004d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <xTaskGetSchedulerState+0x38>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d94:	2302      	movs	r3, #2
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	e001      	b.n	8004d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d9e:	687b      	ldr	r3, [r7, #4]
	}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000d9c 	.word	0x20000d9c
 8004db0:	20000db8 	.word	0x20000db8

08004db4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d051      	beq.n	8004e6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <xTaskPriorityInherit+0xc4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d241      	bcs.n	8004e5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	db06      	blt.n	8004dee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <xTaskPriorityInherit+0xc4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6959      	ldr	r1, [r3, #20]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <xTaskPriorityInherit+0xc8>)
 8004e00:	4413      	add	r3, r2
 8004e02:	4299      	cmp	r1, r3
 8004e04:	d122      	bne.n	8004e4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe fa32 	bl	8003274 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <xTaskPriorityInherit+0xc4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <xTaskPriorityInherit+0xcc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d903      	bls.n	8004e2e <xTaskPriorityInherit+0x7a>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <xTaskPriorityInherit+0xcc>)
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4a10      	ldr	r2, [pc, #64]	; (8004e7c <xTaskPriorityInherit+0xc8>)
 8004e3c:	441a      	add	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	3304      	adds	r3, #4
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f7fe f9b8 	bl	80031ba <vListInsertEnd>
 8004e4a:	e004      	b.n	8004e56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <xTaskPriorityInherit+0xc4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e56:	2301      	movs	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e008      	b.n	8004e6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <xTaskPriorityInherit+0xc4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d201      	bcs.n	8004e6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200008bc 	.word	0x200008bc
 8004e7c:	200008c0 	.word	0x200008c0
 8004e80:	20000d98 	.word	0x20000d98

08004e84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d056      	beq.n	8004f48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <xTaskPriorityDisinherit+0xd0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d00a      	beq.n	8004eba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60bb      	str	r3, [r7, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004edc:	1e5a      	subs	r2, r3, #1
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d02c      	beq.n	8004f48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d128      	bne.n	8004f48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe f9ba 	bl	8003274 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <xTaskPriorityDisinherit+0xd4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d903      	bls.n	8004f28 <xTaskPriorityDisinherit+0xa4>
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <xTaskPriorityDisinherit+0xd4>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <xTaskPriorityDisinherit+0xd8>)
 8004f36:	441a      	add	r2, r3
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f7fe f93b 	bl	80031ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f44:	2301      	movs	r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f48:	697b      	ldr	r3, [r7, #20]
	}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	200008bc 	.word	0x200008bc
 8004f58:	20000d98 	.word	0x20000d98
 8004f5c:	200008c0 	.word	0x200008c0

08004f60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d06a      	beq.n	800504e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60fb      	str	r3, [r7, #12]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d902      	bls.n	8004fa6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e002      	b.n	8004fac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004faa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d04b      	beq.n	800504e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d146      	bne.n	800504e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d10a      	bne.n	8004fe0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	60bb      	str	r3, [r7, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	db04      	blt.n	8004ffe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	6959      	ldr	r1, [r3, #20]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4a13      	ldr	r2, [pc, #76]	; (800505c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800500e:	4413      	add	r3, r2
 8005010:	4299      	cmp	r1, r3
 8005012:	d11c      	bne.n	800504e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	3304      	adds	r3, #4
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe f92b 	bl	8003274 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d903      	bls.n	8005032 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	4a0c      	ldr	r2, [pc, #48]	; (8005060 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4a07      	ldr	r2, [pc, #28]	; (800505c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005040:	441a      	add	r2, r3
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	3304      	adds	r3, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f7fe f8b6 	bl	80031ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800504e:	bf00      	nop
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200008bc 	.word	0x200008bc
 800505c:	200008c0 	.word	0x200008c0
 8005060:	20000d98 	.word	0x20000d98

08005064 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005068:	4b07      	ldr	r3, [pc, #28]	; (8005088 <pvTaskIncrementMutexHeldCount+0x24>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <pvTaskIncrementMutexHeldCount+0x24>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005076:	3201      	adds	r2, #1
 8005078:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800507a:	4b03      	ldr	r3, [pc, #12]	; (8005088 <pvTaskIncrementMutexHeldCount+0x24>)
 800507c:	681b      	ldr	r3, [r3, #0]
	}
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	200008bc 	.word	0x200008bc

0800508c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005096:	4b21      	ldr	r3, [pc, #132]	; (800511c <prvAddCurrentTaskToDelayedList+0x90>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800509c:	4b20      	ldr	r3, [pc, #128]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe f8e6 	bl	8003274 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d10a      	bne.n	80050c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4819      	ldr	r0, [pc, #100]	; (8005124 <prvAddCurrentTaskToDelayedList+0x98>)
 80050c0:	f7fe f87b 	bl	80031ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050c4:	e026      	b.n	8005114 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ce:	4b14      	ldr	r3, [pc, #80]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d209      	bcs.n	80050f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fe f889 	bl	8003202 <vListInsert>
}
 80050f0:	e010      	b.n	8005114 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <prvAddCurrentTaskToDelayedList+0xa0>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <prvAddCurrentTaskToDelayedList+0x94>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7fe f87f 	bl	8003202 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	d202      	bcs.n	8005114 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000d94 	.word	0x20000d94
 8005120:	200008bc 	.word	0x200008bc
 8005124:	20000d7c 	.word	0x20000d7c
 8005128:	20000d4c 	.word	0x20000d4c
 800512c:	20000d48 	.word	0x20000d48
 8005130:	20000db0 	.word	0x20000db0

08005134 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800513e:	f000 fb07 	bl	8005750 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <xTimerCreateTimerTask+0x80>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d021      	beq.n	800518e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005152:	1d3a      	adds	r2, r7, #4
 8005154:	f107 0108 	add.w	r1, r7, #8
 8005158:	f107 030c 	add.w	r3, r7, #12
 800515c:	4618      	mov	r0, r3
 800515e:	f7fd ffe5 	bl	800312c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	9202      	str	r2, [sp, #8]
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	2302      	movs	r3, #2
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	460a      	mov	r2, r1
 8005174:	4910      	ldr	r1, [pc, #64]	; (80051b8 <xTimerCreateTimerTask+0x84>)
 8005176:	4811      	ldr	r0, [pc, #68]	; (80051bc <xTimerCreateTimerTask+0x88>)
 8005178:	f7fe ffa6 	bl	80040c8 <xTaskCreateStatic>
 800517c:	4603      	mov	r3, r0
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <xTimerCreateTimerTask+0x8c>)
 8005180:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <xTimerCreateTimerTask+0x8c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800518a:	2301      	movs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	613b      	str	r3, [r7, #16]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051aa:	697b      	ldr	r3, [r7, #20]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000dec 	.word	0x20000dec
 80051b8:	0800629c 	.word	0x0800629c
 80051bc:	080052f9 	.word	0x080052f9
 80051c0:	20000df0 	.word	0x20000df0

080051c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051f2:	4b1a      	ldr	r3, [pc, #104]	; (800525c <xTimerGenericCommand+0x98>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d02a      	beq.n	8005250 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b05      	cmp	r3, #5
 800520a:	dc18      	bgt.n	800523e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800520c:	f7ff fdb4 	bl	8004d78 <xTaskGetSchedulerState>
 8005210:	4603      	mov	r3, r0
 8005212:	2b02      	cmp	r3, #2
 8005214:	d109      	bne.n	800522a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <xTimerGenericCommand+0x98>)
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	f107 0110 	add.w	r1, r7, #16
 800521e:	2300      	movs	r3, #0
 8005220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005222:	f7fe fa45 	bl	80036b0 <xQueueGenericSend>
 8005226:	6278      	str	r0, [r7, #36]	; 0x24
 8005228:	e012      	b.n	8005250 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <xTimerGenericCommand+0x98>)
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	f107 0110 	add.w	r1, r7, #16
 8005232:	2300      	movs	r3, #0
 8005234:	2200      	movs	r2, #0
 8005236:	f7fe fa3b 	bl	80036b0 <xQueueGenericSend>
 800523a:	6278      	str	r0, [r7, #36]	; 0x24
 800523c:	e008      	b.n	8005250 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <xTimerGenericCommand+0x98>)
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	f107 0110 	add.w	r1, r7, #16
 8005246:	2300      	movs	r3, #0
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	f7fe fb2f 	bl	80038ac <xQueueGenericSendFromISR>
 800524e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005252:	4618      	mov	r0, r3
 8005254:	3728      	adds	r7, #40	; 0x28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000dec 	.word	0x20000dec

08005260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526a:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <prvProcessExpiredTimer+0x94>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f7fd fffb 	bl	8003274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d022      	beq.n	80052d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	18d1      	adds	r1, r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	6978      	ldr	r0, [r7, #20]
 800529a:	f000 f8d1 	bl	8005440 <prvInsertTimerInActiveList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01f      	beq.n	80052e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a4:	2300      	movs	r3, #0
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	2100      	movs	r1, #0
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	f7ff ff88 	bl	80051c4 <xTimerGenericCommand>
 80052b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d113      	bne.n	80052e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60fb      	str	r3, [r7, #12]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	4798      	blx	r3
}
 80052ec:	bf00      	nop
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20000de4 	.word	0x20000de4

080052f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f857 	bl	80053b8 <prvGetNextExpireTime>
 800530a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f803 	bl	800531c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005316:	f000 f8d5 	bl	80054c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800531a:	e7f1      	b.n	8005300 <prvTimerTask+0x8>

0800531c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005326:	f7ff f92b 	bl	8004580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800532a:	f107 0308 	add.w	r3, r7, #8
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f866 	bl	8005400 <prvSampleTimeNow>
 8005334:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d130      	bne.n	800539e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <prvProcessTimerOrBlockTask+0x3c>
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	429a      	cmp	r2, r3
 8005348:	d806      	bhi.n	8005358 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800534a:	f7ff f927 	bl	800459c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff ff85 	bl	8005260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005356:	e024      	b.n	80053a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800535e:	4b13      	ldr	r3, [pc, #76]	; (80053ac <prvProcessTimerOrBlockTask+0x90>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <prvProcessTimerOrBlockTask+0x50>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <prvProcessTimerOrBlockTask+0x52>
 800536c:	2300      	movs	r3, #0
 800536e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <prvProcessTimerOrBlockTask+0x94>)
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	4619      	mov	r1, r3
 800537e:	f7fe fe6f 	bl	8004060 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005382:	f7ff f90b 	bl	800459c <xTaskResumeAll>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <prvProcessTimerOrBlockTask+0x98>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
}
 800539c:	e001      	b.n	80053a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800539e:	f7ff f8fd 	bl	800459c <xTaskResumeAll>
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000de8 	.word	0x20000de8
 80053b0:	20000dec 	.word	0x20000dec
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <prvGetNextExpireTime+0x44>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <prvGetNextExpireTime+0x16>
 80053ca:	2201      	movs	r2, #1
 80053cc:	e000      	b.n	80053d0 <prvGetNextExpireTime+0x18>
 80053ce:	2200      	movs	r2, #0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d105      	bne.n	80053e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <prvGetNextExpireTime+0x44>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e001      	b.n	80053ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000de4 	.word	0x20000de4

08005400 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005408:	f7ff f966 	bl	80046d8 <xTaskGetTickCount>
 800540c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <prvSampleTimeNow+0x3c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	429a      	cmp	r2, r3
 8005416:	d205      	bcs.n	8005424 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005418:	f000 f936 	bl	8005688 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e002      	b.n	800542a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800542a:	4a04      	ldr	r2, [pc, #16]	; (800543c <prvSampleTimeNow+0x3c>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005430:	68fb      	ldr	r3, [r7, #12]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000df4 	.word	0x20000df4

08005440 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d812      	bhi.n	800548c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e01b      	b.n	80054b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <prvInsertTimerInActiveList+0x7c>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f7fd febc 	bl	8003202 <vListInsert>
 800548a:	e012      	b.n	80054b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d206      	bcs.n	80054a2 <prvInsertTimerInActiveList+0x62>
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d302      	bcc.n	80054a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e007      	b.n	80054b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <prvInsertTimerInActiveList+0x80>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3304      	adds	r3, #4
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f7fd fea8 	bl	8003202 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054b2:	697b      	ldr	r3, [r7, #20]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20000de8 	.word	0x20000de8
 80054c0:	20000de4 	.word	0x20000de4

080054c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08e      	sub	sp, #56	; 0x38
 80054c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054ca:	e0ca      	b.n	8005662 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	da18      	bge.n	8005504 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054d2:	1d3b      	adds	r3, r7, #4
 80054d4:	3304      	adds	r3, #4
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	61fb      	str	r3, [r7, #28]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fa:	6850      	ldr	r0, [r2, #4]
 80054fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fe:	6892      	ldr	r2, [r2, #8]
 8005500:	4611      	mov	r1, r2
 8005502:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f2c0 80ab 	blt.w	8005662 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7fd fea9 	bl	8003274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005522:	463b      	mov	r3, r7
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff ff6b 	bl	8005400 <prvSampleTimeNow>
 800552a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b09      	cmp	r3, #9
 8005530:	f200 8096 	bhi.w	8005660 <prvProcessReceivedCommands+0x19c>
 8005534:	a201      	add	r2, pc, #4	; (adr r2, 800553c <prvProcessReceivedCommands+0x78>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005565 	.word	0x08005565
 8005540:	08005565 	.word	0x08005565
 8005544:	08005565 	.word	0x08005565
 8005548:	080055d9 	.word	0x080055d9
 800554c:	080055ed 	.word	0x080055ed
 8005550:	08005637 	.word	0x08005637
 8005554:	08005565 	.word	0x08005565
 8005558:	08005565 	.word	0x08005565
 800555c:	080055d9 	.word	0x080055d9
 8005560:	080055ed 	.word	0x080055ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	18d1      	adds	r1, r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005584:	f7ff ff5c 	bl	8005440 <prvInsertTimerInActiveList>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d069      	beq.n	8005662 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005594:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d05e      	beq.n	8005662 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	441a      	add	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	2300      	movs	r3, #0
 80055b2:	2100      	movs	r1, #0
 80055b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b6:	f7ff fe05 	bl	80051c4 <xTimerGenericCommand>
 80055ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d14f      	bne.n	8005662 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	61bb      	str	r3, [r7, #24]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055ea:	e03a      	b.n	8005662 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	617b      	str	r3, [r7, #20]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	18d1      	adds	r1, r2, r3
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005630:	f7ff ff06 	bl	8005440 <prvInsertTimerInActiveList>
					break;
 8005634:	e015      	b.n	8005662 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005646:	f000 fbdb 	bl	8005e00 <vPortFree>
 800564a:	e00a      	b.n	8005662 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005652:	f023 0301 	bic.w	r3, r3, #1
 8005656:	b2da      	uxtb	r2, r3
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800565e:	e000      	b.n	8005662 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005660:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <prvProcessReceivedCommands+0x1c0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	1d39      	adds	r1, r7, #4
 8005668:	2200      	movs	r2, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f7fe f9ba 	bl	80039e4 <xQueueReceive>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	f47f af2a 	bne.w	80054cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3730      	adds	r7, #48	; 0x30
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000dec 	.word	0x20000dec

08005688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800568e:	e048      	b.n	8005722 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <prvSwitchTimerLists+0xc0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569a:	4b2b      	ldr	r3, [pc, #172]	; (8005748 <prvSwitchTimerLists+0xc0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fd fde3 	bl	8003274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d02e      	beq.n	8005722 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d90e      	bls.n	80056f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056e2:	4b19      	ldr	r3, [pc, #100]	; (8005748 <prvSwitchTimerLists+0xc0>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7fd fd88 	bl	8003202 <vListInsert>
 80056f2:	e016      	b.n	8005722 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056f4:	2300      	movs	r3, #0
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	2300      	movs	r3, #0
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	2100      	movs	r1, #0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff fd60 	bl	80051c4 <xTimerGenericCommand>
 8005704:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	603b      	str	r3, [r7, #0]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <prvSwitchTimerLists+0xc0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1b1      	bne.n	8005690 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <prvSwitchTimerLists+0xc0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <prvSwitchTimerLists+0xc4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a04      	ldr	r2, [pc, #16]	; (8005748 <prvSwitchTimerLists+0xc0>)
 8005738:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800573a:	4a04      	ldr	r2, [pc, #16]	; (800574c <prvSwitchTimerLists+0xc4>)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	6013      	str	r3, [r2, #0]
}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000de4 	.word	0x20000de4
 800574c:	20000de8 	.word	0x20000de8

08005750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005756:	f000 f965 	bl	8005a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <prvCheckForValidListAndQueue+0x60>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d120      	bne.n	80057a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005762:	4814      	ldr	r0, [pc, #80]	; (80057b4 <prvCheckForValidListAndQueue+0x64>)
 8005764:	f7fd fcfc 	bl	8003160 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005768:	4813      	ldr	r0, [pc, #76]	; (80057b8 <prvCheckForValidListAndQueue+0x68>)
 800576a:	f7fd fcf9 	bl	8003160 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <prvCheckForValidListAndQueue+0x6c>)
 8005770:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <prvCheckForValidListAndQueue+0x64>)
 8005772:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <prvCheckForValidListAndQueue+0x70>)
 8005776:	4a10      	ldr	r2, [pc, #64]	; (80057b8 <prvCheckForValidListAndQueue+0x68>)
 8005778:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800577a:	2300      	movs	r3, #0
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <prvCheckForValidListAndQueue+0x74>)
 8005780:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <prvCheckForValidListAndQueue+0x78>)
 8005782:	2110      	movs	r1, #16
 8005784:	200a      	movs	r0, #10
 8005786:	f7fd fe07 	bl	8003398 <xQueueGenericCreateStatic>
 800578a:	4603      	mov	r3, r0
 800578c:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <prvCheckForValidListAndQueue+0x60>)
 800578e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <prvCheckForValidListAndQueue+0x60>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <prvCheckForValidListAndQueue+0x60>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	490b      	ldr	r1, [pc, #44]	; (80057cc <prvCheckForValidListAndQueue+0x7c>)
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fc34 	bl	800400c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057a4:	f000 f96e 	bl	8005a84 <vPortExitCritical>
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000dec 	.word	0x20000dec
 80057b4:	20000dbc 	.word	0x20000dbc
 80057b8:	20000dd0 	.word	0x20000dd0
 80057bc:	20000de4 	.word	0x20000de4
 80057c0:	20000de8 	.word	0x20000de8
 80057c4:	20000e98 	.word	0x20000e98
 80057c8:	20000df8 	.word	0x20000df8
 80057cc:	080062a4 	.word	0x080062a4

080057d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3b04      	subs	r3, #4
 80057e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b04      	subs	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0201 	bic.w	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3b04      	subs	r3, #4
 80057fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005800:	4a0c      	ldr	r2, [pc, #48]	; (8005834 <pxPortInitialiseStack+0x64>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b14      	subs	r3, #20
 800580a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3b04      	subs	r3, #4
 8005816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f06f 0202 	mvn.w	r2, #2
 800581e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3b20      	subs	r3, #32
 8005824:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005826:	68fb      	ldr	r3, [r7, #12]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	08005839 	.word	0x08005839

08005838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <prvTaskExitError+0x54>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d00a      	beq.n	8005862 <prvTaskExitError+0x2a>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60fb      	str	r3, [r7, #12]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <prvTaskExitError+0x28>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	60bb      	str	r3, [r7, #8]
}
 8005874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005876:	bf00      	nop
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0fc      	beq.n	8005878 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	2000000c 	.word	0x2000000c

08005890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058da:	bf00      	nop
 80058dc:	e000ed08 	.word	0xe000ed08

080058e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058e6:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <xPortStartScheduler+0x120>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a46      	ldr	r2, [pc, #280]	; (8005a04 <xPortStartScheduler+0x124>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10a      	bne.n	8005906 <xPortStartScheduler+0x26>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005906:	4b3e      	ldr	r3, [pc, #248]	; (8005a00 <xPortStartScheduler+0x120>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3f      	ldr	r2, [pc, #252]	; (8005a08 <xPortStartScheduler+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10a      	bne.n	8005926 <xPortStartScheduler+0x46>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005926:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <xPortStartScheduler+0x12c>)
 8005928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <xPortStartScheduler+0x130>)
 800594c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <xPortStartScheduler+0x134>)
 8005950:	2207      	movs	r2, #7
 8005952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005954:	e009      	b.n	800596a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <xPortStartScheduler+0x134>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <xPortStartScheduler+0x134>)
 800595e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d0ef      	beq.n	8005956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1c3 0307 	rsb	r3, r3, #7
 800597e:	2b04      	cmp	r3, #4
 8005980:	d00a      	beq.n	8005998 <xPortStartScheduler+0xb8>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	60bb      	str	r3, [r7, #8]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <xPortStartScheduler+0x134>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <xPortStartScheduler+0x134>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <xPortStartScheduler+0x134>)
 80059ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <xPortStartScheduler+0x138>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <xPortStartScheduler+0x138>)
 80059bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <xPortStartScheduler+0x138>)
 80059c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059ce:	f000 f8dd 	bl	8005b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <xPortStartScheduler+0x13c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059d8:	f000 f8fc 	bl	8005bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <xPortStartScheduler+0x140>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0f      	ldr	r2, [pc, #60]	; (8005a20 <xPortStartScheduler+0x140>)
 80059e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059e8:	f7ff ff66 	bl	80058b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059ec:	f7fe ff3e 	bl	800486c <vTaskSwitchContext>
	prvTaskExitError();
 80059f0:	f7ff ff22 	bl	8005838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e000ed00 	.word	0xe000ed00
 8005a04:	410fc271 	.word	0x410fc271
 8005a08:	410fc270 	.word	0x410fc270
 8005a0c:	e000e400 	.word	0xe000e400
 8005a10:	20000ee8 	.word	0x20000ee8
 8005a14:	20000eec 	.word	0x20000eec
 8005a18:	e000ed20 	.word	0xe000ed20
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	e000ef34 	.word	0xe000ef34

08005a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
}
 8005a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a3e:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <vPortEnterCritical+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d10f      	bne.n	8005a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortEnterCritical+0x5c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <vPortEnterCritical+0x4a>
	}
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <vPortExitCritical+0x50>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <vPortExitCritical+0x24>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	607b      	str	r3, [r7, #4]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vPortExitCritical+0x50>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <vPortExitCritical+0x42>
 8005aba:	2300      	movs	r3, #0
 8005abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
}
 8005ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	2000000c 	.word	0x2000000c
	...

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7fe feac 	bl	800486c <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b62:	f7fe fdc9 	bl	80046f8 <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <xPortSysTickHandler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
}
 8005b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000000 	.word	0x20000000
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005be2:	bf00      	nop
 8005be4:	e000ed88 	.word	0xe000ed88

08005be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d914      	bls.n	8005c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfa:	4a17      	ldr	r2, [pc, #92]	; (8005c58 <vPortValidateInterruptPriority+0x70>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <vPortValidateInterruptPriority+0x74>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20a      	bcs.n	8005c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <vPortValidateInterruptPriority+0x78>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <vPortValidateInterruptPriority+0x7c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d90a      	bls.n	8005c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	603b      	str	r3, [r7, #0]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <vPortValidateInterruptPriority+0x60>
	}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000e3f0 	.word	0xe000e3f0
 8005c5c:	20000ee8 	.word	0x20000ee8
 8005c60:	e000ed0c 	.word	0xe000ed0c
 8005c64:	20000eec 	.word	0x20000eec

08005c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c74:	f7fe fc84 	bl	8004580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c78:	4b5b      	ldr	r3, [pc, #364]	; (8005de8 <pvPortMalloc+0x180>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c80:	f000 f920 	bl	8005ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <pvPortMalloc+0x184>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8093 	bne.w	8005db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01d      	beq.n	8005cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c98:	2208      	movs	r2, #8
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f023 0307 	bic.w	r3, r3, #7
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	617b      	str	r3, [r7, #20]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d06e      	beq.n	8005db8 <pvPortMalloc+0x150>
 8005cda:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <pvPortMalloc+0x188>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d869      	bhi.n	8005db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ce4:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <pvPortMalloc+0x18c>)
 8005ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ce8:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <pvPortMalloc+0x18c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cee:	e004      	b.n	8005cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <pvPortMalloc+0xa4>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f1      	bne.n	8005cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <pvPortMalloc+0x180>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d050      	beq.n	8005db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad2      	subs	r2, r2, r3
 8005d30:	2308      	movs	r3, #8
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d91f      	bls.n	8005d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <pvPortMalloc+0xf8>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	613b      	str	r3, [r7, #16]
}
 8005d5c:	bf00      	nop
 8005d5e:	e7fe      	b.n	8005d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f000 f908 	bl	8005f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <pvPortMalloc+0x188>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <pvPortMalloc+0x188>)
 8005d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <pvPortMalloc+0x188>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <pvPortMalloc+0x190>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d203      	bcs.n	8005d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <pvPortMalloc+0x188>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <pvPortMalloc+0x190>)
 8005d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <pvPortMalloc+0x184>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <pvPortMalloc+0x194>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <pvPortMalloc+0x194>)
 8005db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005db8:	f7fe fbf0 	bl	800459c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <pvPortMalloc+0x174>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <pvPortMalloc+0x172>
	return pvReturn;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20004af8 	.word	0x20004af8
 8005dec:	20004b0c 	.word	0x20004b0c
 8005df0:	20004afc 	.word	0x20004afc
 8005df4:	20004af0 	.word	0x20004af0
 8005df8:	20004b00 	.word	0x20004b00
 8005dfc:	20004b04 	.word	0x20004b04

08005e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d04d      	beq.n	8005eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e12:	2308      	movs	r3, #8
 8005e14:	425b      	negs	r3, r3
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <vPortFree+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <vPortFree+0x44>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <vPortFree+0x62>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60bb      	str	r3, [r7, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <vPortFree+0xb8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01e      	beq.n	8005eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d11a      	bne.n	8005eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <vPortFree+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e88:	f7fe fb7a 	bl	8004580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <vPortFree+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <vPortFree+0xbc>)
 8005e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e9a:	6938      	ldr	r0, [r7, #16]
 8005e9c:	f000 f874 	bl	8005f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vPortFree+0xc0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortFree+0xc0>)
 8005ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eaa:	f7fe fb77 	bl	800459c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20004b0c 	.word	0x20004b0c
 8005ebc:	20004afc 	.word	0x20004afc
 8005ec0:	20004b08 	.word	0x20004b08

08005ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	20000ef0 	.word	0x20000ef0
 8005f74:	20004af0 	.word	0x20004af0
 8005f78:	20004af8 	.word	0x20004af8
 8005f7c:	20004b00 	.word	0x20004b00
 8005f80:	20004afc 	.word	0x20004afc
 8005f84:	20004b0c 	.word	0x20004b0c

08005f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20004af0 	.word	0x20004af0
 8006038:	20004af8 	.word	0x20004af8

0800603c <memset>:
 800603c:	4402      	add	r2, r0
 800603e:	4603      	mov	r3, r0
 8006040:	4293      	cmp	r3, r2
 8006042:	d100      	bne.n	8006046 <memset+0xa>
 8006044:	4770      	bx	lr
 8006046:	f803 1b01 	strb.w	r1, [r3], #1
 800604a:	e7f9      	b.n	8006040 <memset+0x4>

0800604c <_reclaim_reent>:
 800604c:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <_reclaim_reent+0xa8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4283      	cmp	r3, r0
 8006052:	b570      	push	{r4, r5, r6, lr}
 8006054:	4604      	mov	r4, r0
 8006056:	d04b      	beq.n	80060f0 <_reclaim_reent+0xa4>
 8006058:	69c3      	ldr	r3, [r0, #28]
 800605a:	b143      	cbz	r3, 800606e <_reclaim_reent+0x22>
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d144      	bne.n	80060ec <_reclaim_reent+0xa0>
 8006062:	69e3      	ldr	r3, [r4, #28]
 8006064:	6819      	ldr	r1, [r3, #0]
 8006066:	b111      	cbz	r1, 800606e <_reclaim_reent+0x22>
 8006068:	4620      	mov	r0, r4
 800606a:	f000 f879 	bl	8006160 <_free_r>
 800606e:	6961      	ldr	r1, [r4, #20]
 8006070:	b111      	cbz	r1, 8006078 <_reclaim_reent+0x2c>
 8006072:	4620      	mov	r0, r4
 8006074:	f000 f874 	bl	8006160 <_free_r>
 8006078:	69e1      	ldr	r1, [r4, #28]
 800607a:	b111      	cbz	r1, 8006082 <_reclaim_reent+0x36>
 800607c:	4620      	mov	r0, r4
 800607e:	f000 f86f 	bl	8006160 <_free_r>
 8006082:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006084:	b111      	cbz	r1, 800608c <_reclaim_reent+0x40>
 8006086:	4620      	mov	r0, r4
 8006088:	f000 f86a 	bl	8006160 <_free_r>
 800608c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800608e:	b111      	cbz	r1, 8006096 <_reclaim_reent+0x4a>
 8006090:	4620      	mov	r0, r4
 8006092:	f000 f865 	bl	8006160 <_free_r>
 8006096:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006098:	b111      	cbz	r1, 80060a0 <_reclaim_reent+0x54>
 800609a:	4620      	mov	r0, r4
 800609c:	f000 f860 	bl	8006160 <_free_r>
 80060a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80060a2:	b111      	cbz	r1, 80060aa <_reclaim_reent+0x5e>
 80060a4:	4620      	mov	r0, r4
 80060a6:	f000 f85b 	bl	8006160 <_free_r>
 80060aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80060ac:	b111      	cbz	r1, 80060b4 <_reclaim_reent+0x68>
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 f856 	bl	8006160 <_free_r>
 80060b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80060b6:	b111      	cbz	r1, 80060be <_reclaim_reent+0x72>
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f851 	bl	8006160 <_free_r>
 80060be:	6a23      	ldr	r3, [r4, #32]
 80060c0:	b1b3      	cbz	r3, 80060f0 <_reclaim_reent+0xa4>
 80060c2:	4620      	mov	r0, r4
 80060c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060c8:	4718      	bx	r3
 80060ca:	5949      	ldr	r1, [r1, r5]
 80060cc:	b941      	cbnz	r1, 80060e0 <_reclaim_reent+0x94>
 80060ce:	3504      	adds	r5, #4
 80060d0:	69e3      	ldr	r3, [r4, #28]
 80060d2:	2d80      	cmp	r5, #128	; 0x80
 80060d4:	68d9      	ldr	r1, [r3, #12]
 80060d6:	d1f8      	bne.n	80060ca <_reclaim_reent+0x7e>
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 f841 	bl	8006160 <_free_r>
 80060de:	e7c0      	b.n	8006062 <_reclaim_reent+0x16>
 80060e0:	680e      	ldr	r6, [r1, #0]
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 f83c 	bl	8006160 <_free_r>
 80060e8:	4631      	mov	r1, r6
 80060ea:	e7ef      	b.n	80060cc <_reclaim_reent+0x80>
 80060ec:	2500      	movs	r5, #0
 80060ee:	e7ef      	b.n	80060d0 <_reclaim_reent+0x84>
 80060f0:	bd70      	pop	{r4, r5, r6, pc}
 80060f2:	bf00      	nop
 80060f4:	2000005c 	.word	0x2000005c

080060f8 <__libc_init_array>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	4d0d      	ldr	r5, [pc, #52]	; (8006130 <__libc_init_array+0x38>)
 80060fc:	4c0d      	ldr	r4, [pc, #52]	; (8006134 <__libc_init_array+0x3c>)
 80060fe:	1b64      	subs	r4, r4, r5
 8006100:	10a4      	asrs	r4, r4, #2
 8006102:	2600      	movs	r6, #0
 8006104:	42a6      	cmp	r6, r4
 8006106:	d109      	bne.n	800611c <__libc_init_array+0x24>
 8006108:	4d0b      	ldr	r5, [pc, #44]	; (8006138 <__libc_init_array+0x40>)
 800610a:	4c0c      	ldr	r4, [pc, #48]	; (800613c <__libc_init_array+0x44>)
 800610c:	f000 f880 	bl	8006210 <_init>
 8006110:	1b64      	subs	r4, r4, r5
 8006112:	10a4      	asrs	r4, r4, #2
 8006114:	2600      	movs	r6, #0
 8006116:	42a6      	cmp	r6, r4
 8006118:	d105      	bne.n	8006126 <__libc_init_array+0x2e>
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006120:	4798      	blx	r3
 8006122:	3601      	adds	r6, #1
 8006124:	e7ee      	b.n	8006104 <__libc_init_array+0xc>
 8006126:	f855 3b04 	ldr.w	r3, [r5], #4
 800612a:	4798      	blx	r3
 800612c:	3601      	adds	r6, #1
 800612e:	e7f2      	b.n	8006116 <__libc_init_array+0x1e>
 8006130:	08006388 	.word	0x08006388
 8006134:	08006388 	.word	0x08006388
 8006138:	08006388 	.word	0x08006388
 800613c:	0800638c 	.word	0x0800638c

08006140 <__retarget_lock_acquire_recursive>:
 8006140:	4770      	bx	lr

08006142 <__retarget_lock_release_recursive>:
 8006142:	4770      	bx	lr

08006144 <memcpy>:
 8006144:	440a      	add	r2, r1
 8006146:	4291      	cmp	r1, r2
 8006148:	f100 33ff 	add.w	r3, r0, #4294967295
 800614c:	d100      	bne.n	8006150 <memcpy+0xc>
 800614e:	4770      	bx	lr
 8006150:	b510      	push	{r4, lr}
 8006152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800615a:	4291      	cmp	r1, r2
 800615c:	d1f9      	bne.n	8006152 <memcpy+0xe>
 800615e:	bd10      	pop	{r4, pc}

08006160 <_free_r>:
 8006160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006162:	2900      	cmp	r1, #0
 8006164:	d044      	beq.n	80061f0 <_free_r+0x90>
 8006166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800616a:	9001      	str	r0, [sp, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f1a1 0404 	sub.w	r4, r1, #4
 8006172:	bfb8      	it	lt
 8006174:	18e4      	addlt	r4, r4, r3
 8006176:	f000 f83f 	bl	80061f8 <__malloc_lock>
 800617a:	4a1e      	ldr	r2, [pc, #120]	; (80061f4 <_free_r+0x94>)
 800617c:	9801      	ldr	r0, [sp, #4]
 800617e:	6813      	ldr	r3, [r2, #0]
 8006180:	b933      	cbnz	r3, 8006190 <_free_r+0x30>
 8006182:	6063      	str	r3, [r4, #4]
 8006184:	6014      	str	r4, [r2, #0]
 8006186:	b003      	add	sp, #12
 8006188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800618c:	f000 b83a 	b.w	8006204 <__malloc_unlock>
 8006190:	42a3      	cmp	r3, r4
 8006192:	d908      	bls.n	80061a6 <_free_r+0x46>
 8006194:	6825      	ldr	r5, [r4, #0]
 8006196:	1961      	adds	r1, r4, r5
 8006198:	428b      	cmp	r3, r1
 800619a:	bf01      	itttt	eq
 800619c:	6819      	ldreq	r1, [r3, #0]
 800619e:	685b      	ldreq	r3, [r3, #4]
 80061a0:	1949      	addeq	r1, r1, r5
 80061a2:	6021      	streq	r1, [r4, #0]
 80061a4:	e7ed      	b.n	8006182 <_free_r+0x22>
 80061a6:	461a      	mov	r2, r3
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	b10b      	cbz	r3, 80061b0 <_free_r+0x50>
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	d9fa      	bls.n	80061a6 <_free_r+0x46>
 80061b0:	6811      	ldr	r1, [r2, #0]
 80061b2:	1855      	adds	r5, r2, r1
 80061b4:	42a5      	cmp	r5, r4
 80061b6:	d10b      	bne.n	80061d0 <_free_r+0x70>
 80061b8:	6824      	ldr	r4, [r4, #0]
 80061ba:	4421      	add	r1, r4
 80061bc:	1854      	adds	r4, r2, r1
 80061be:	42a3      	cmp	r3, r4
 80061c0:	6011      	str	r1, [r2, #0]
 80061c2:	d1e0      	bne.n	8006186 <_free_r+0x26>
 80061c4:	681c      	ldr	r4, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	6053      	str	r3, [r2, #4]
 80061ca:	440c      	add	r4, r1
 80061cc:	6014      	str	r4, [r2, #0]
 80061ce:	e7da      	b.n	8006186 <_free_r+0x26>
 80061d0:	d902      	bls.n	80061d8 <_free_r+0x78>
 80061d2:	230c      	movs	r3, #12
 80061d4:	6003      	str	r3, [r0, #0]
 80061d6:	e7d6      	b.n	8006186 <_free_r+0x26>
 80061d8:	6825      	ldr	r5, [r4, #0]
 80061da:	1961      	adds	r1, r4, r5
 80061dc:	428b      	cmp	r3, r1
 80061de:	bf04      	itt	eq
 80061e0:	6819      	ldreq	r1, [r3, #0]
 80061e2:	685b      	ldreq	r3, [r3, #4]
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	bf04      	itt	eq
 80061e8:	1949      	addeq	r1, r1, r5
 80061ea:	6021      	streq	r1, [r4, #0]
 80061ec:	6054      	str	r4, [r2, #4]
 80061ee:	e7ca      	b.n	8006186 <_free_r+0x26>
 80061f0:	b003      	add	sp, #12
 80061f2:	bd30      	pop	{r4, r5, pc}
 80061f4:	20004c4c 	.word	0x20004c4c

080061f8 <__malloc_lock>:
 80061f8:	4801      	ldr	r0, [pc, #4]	; (8006200 <__malloc_lock+0x8>)
 80061fa:	f7ff bfa1 	b.w	8006140 <__retarget_lock_acquire_recursive>
 80061fe:	bf00      	nop
 8006200:	20004c48 	.word	0x20004c48

08006204 <__malloc_unlock>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__malloc_unlock+0x8>)
 8006206:	f7ff bf9c 	b.w	8006142 <__retarget_lock_release_recursive>
 800620a:	bf00      	nop
 800620c:	20004c48 	.word	0x20004c48

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
